#!/bin/bash
set -euo pipefail

# BlueSpice Wiki Deployment Script
# Rewritten to work correctly with pre-existing container system

# Default values
WIKI_NAME=""
FRESH_INSTALL="false"
export UPGRADE_ACTION=""
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}✓${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

# Load environment variables
# Help function
show_help() {
    cat << 'HELP'
BlueSpice Wiki Deployment Script
===============================

SYNOPSIS:
    ./bluespice-deploy-wiki --wiki-name=NAME [OPTIONS]

DESCRIPTION:
    Deploys and manages BlueSpice wiki instances with enhanced database connectivity,
    socket connection support, and automated configuration management.

REQUIRED ARGUMENTS:
    --wiki-name=NAME        Name of the wiki instance to deploy/manage
                           Must match an existing wiki directory in /core/wikis/

OPTIONS:
    --fresh-install        Perform a fresh installation (removes existing data)
    --run-update          Run update/upgrade procedures on existing wiki
    --profile=upgrade     Run standard upgrade pipeline
    --profile=upgrade-force   Force upgrade pipeline (use with caution)
    -h, --help            Show this help message and exit

FEATURES:
    • Enhanced socket connection management for improved database performance
    • Unique database user creation per wiki instance (e.g., wikiname_user)
    • Comprehensive health checks and verification procedures
    • SSL certificate integration and management
    • Email/SMTP configuration validation
    • Automated service orchestration with Docker Compose

DEPLOYMENT PROCESS:
    1. Environment validation and configuration loading
    2. Database connectivity verification
    3. Unique user authentication setup with socket connections
    4. MediaWiki installation/update procedures
    5. BlueSpice-specific configuration and extensions
    6. Service health checks and verification
    7. Post-deployment cleanup and optimization

DATABASE CONNECTIVITY:
    • Uses direct database host connections
    • Creates unique database users per wiki (PREFIX_user format)
    • Enhanced database user management
    • Enhanced error handling for connection issues
    • Improved performance through local socket communication

UPGRADE PROFILES:
    upgrade         Standard upgrade process with safety checks
    upgrade-force   Forced upgrade bypassing some safety checks
                   (Use only when standard upgrade fails)

EXAMPLES:
    # Deploy a new wiki instance
    ./bluespice-deploy-wiki --wiki-name=my-wiki --fresh-install

    # Update an existing wiki
    ./bluespice-deploy-wiki --wiki-name=my-wiki --run-update

    # Perform standard upgrade
    ./bluespice-deploy-wiki --wiki-name=my-wiki --profile=upgrade

    # Force upgrade (emergency use)
    ./bluespice-deploy-wiki --wiki-name=my-wiki --profile=upgrade-force

    # Show help
    ./bluespice-deploy-wiki --help

PREREQUISITES:
    • Wiki instance directory must exist in /core/wikis/WIKI_NAME/
    • Valid .env configuration file in the wiki directory
    • BlueSpice database service must be running and accessible
    • Docker and Docker Compose must be available
    • Sufficient disk space and memory resources

FILES AND DIRECTORIES:
    /core/wikis/WIKI_NAME/.env              Environment configuration
    /core/wikis/WIKI_NAME/docker-compose.*  Service orchestration files
    /data/bluespice/initialAdminPassword Generated admin credentials
    /data/bluespice/                        Persistent data storage

TROUBLESHOOTING:
    • Database connection issues: Check socket connectivity and user permissions
    • Service startup failures: Verify Docker daemon and resource availability
    • SSL problems: Check certificate validity and Let's Encrypt configuration
    • Permission errors: Ensure proper directory ownership and Docker access

EXIT CODES:
    0   Success
    1   General error (invalid arguments, missing requirements)
    2   Database connectivity failure
    3   Service deployment failure
    4   Configuration validation failure

For more information, see the BlueSpice documentation or contact support.
HELP
}

setup_socket_proxy() {
    local container="$1"
    
    log_info "Installing socat and setting up socket proxy in $container..."
    docker exec --user root "$container" bash -c '
    # Install socat if not present (Alpine Linux uses apk)
    if ! command -v socat >/dev/null; then
        apk update >/dev/null 2>&1
        apk add socat >/dev/null 2>&1
    fi
    
    # Create MySQL socket directory
    mkdir -p /var/run/mysqld
    
    # Kill any existing socat processes
    pkill socat 2>/dev/null || true
    
    # Remove any existing socket file
    rm -f /var/run/mysqld/mysqld.sock
    
    # Create socket proxy that forwards local socket to remote database
    nohup socat UNIX-LISTEN:/var/run/mysqld/mysqld.sock,fork,reuseaddr TCP:database:3306 </dev/null >/dev/null 2>&1 &
    
    # Wait for socket to be created
    sleep 3
    
    # Fix socket permissions so non-root users can access it
    chmod 777 /var/run/mysqld/mysqld.sock
    
    # Verify socket exists
    if [ ! -S /var/run/mysqld/mysqld.sock ]; then
        echo "Error: Failed to create socket proxy"
        exit 1
    fi
    '
}


load_environment() {
    if [[ -f "/core/wikis/${WIKI_NAME}/.env" ]]; then
        set -a
        # shellcheck source=/dev/null
        source "/core/wikis/${WIKI_NAME}/.env"
        set +a
        log_info "Environment loaded from /core/wikis/${WIKI_NAME}/.env"
        
        # Load shared environment for database credentials
        if [[ -f "${SCRIPT_DIR}/shared/.shared.env" ]]; then
            # shellcheck source=/dev/null
            source "${SCRIPT_DIR}/shared/.shared.env"
        fi
        
        # Set default values for missing variables
        WIKI_FQDN="${WIKI_HOST:-${VIRTUAL_HOST:-localhost}}"
        DB_ROOT_USER="${DB_ROOT_USER:-root}"
        WIKI_LANG="${WIKI_LANG:-en}"
        
    else
        log_error "Environment file not found: /core/wikis/${WIKI_NAME}/.env"
        exit 1
    fi
}

# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            --wiki-name=*)
                WIKI_NAME="${1#*=}"
                shift
                ;;
            --fresh-install)
                FRESH_INSTALL="true"
                shift
                ;;
            --run-update)
                shift
                ;;
            --profile=upgrade)
                export UPGRADE_ACTION="/app/bin/upgrade-pipeline"
                shift
                ;;
            --profile=upgrade-force)
                export UPGRADE_ACTION="/app/bin/upgrade-pipeline --force"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done

    if [[ -z "$WIKI_NAME" ]]; then
        log_error "Wiki name is required. Use --wiki-name=NAME"
        exit 1
    fi
}

# Create required data directories
create_data_directories() {
    log_info "Creating required directories..."
    # DATA_DIR is set in sourced .env files
    
    # shellcheck disable=SC2153
    local data_dir="${DATA_DIR}"
    
    # Create directory structure
    sudo mkdir -p "${data_dir}"/{database,proxy,search,bluespice}
    sudo mkdir -p "${data_dir}/wiki"/{database,wiki,search}
    
    # Set proper ownership
    sudo chown -R 911:911 "${data_dir}/database" 2>/dev/null || true
    sudo chown -R 911:911 "${data_dir}/wiki/database" 2>/dev/null || true
    sudo chown -R 1002:bluespice "${data_dir}/bluespice" 2>/dev/null || true
    sudo chown -R 1002:bluespice "${data_dir}/wiki/wiki" 2>/dev/null || true
    sudo chown -R 1000:1000 "${data_dir}/search" 2>/dev/null || true
    sudo chown -R 1000:1000 "${data_dir}/wiki/search" 2>/dev/null || true
    sudo chown -R root:root "${data_dir}/proxy" 2>/dev/null || true
    
    log_info "Data directories created"
}

# Fix data directory permissions for BlueSpice
fix_data_permissions() {
    log_info "Fixing data directory permissions..."
    
    # The main data directory needs to be writable by the bluespice user (UID 1002)
    # This is mounted as /data inside the container
    sudo chown 1002:bluespice "${DATA_DIR}/bluespice" 2>/dev/null || true
    
    # Ensure the bluespice user can write to the mounted data directory
    sudo chmod -R 777 /data/ 2>/dev/null || true
    
    log_info "Data directory permissions fixed"
}

# Wait for container to be healthy
wait_for_healthy() {
    local container="$1"
    local max_attempts=30
    local attempt=1
    
    log_info "Waiting for $container to be healthy..."
    
    while [[ $attempt -le $max_attempts ]]; do
        if docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null | grep -q "healthy"; then
            log_info "$container is healthy"
            return 0
        fi
        
        log_warn "Attempt $attempt/$max_attempts: $container not yet healthy, waiting..."
        sleep 10
        ((attempt++))
    done
    
    log_error "$container failed to become healthy after $max_attempts attempts"
    return 1
}

# Test database connectivity
test_database_connectivity() {
    log_info "Verifying database network connectivity..."
    log_info "Testing database connectivity..."
    
    # Test connection directly to the database container using mariadb
    if docker exec bluespice-database mariadb -h localhost -P 3306 -u"$DB_ROOT_USER" -p"$DB_ROOT_PASS" -e "SELECT 1;" >/dev/null 2>&1; then
        log_info "Database connectivity verified"
        return 0
    else
        log_error "Database connectivity test failed"
        return 1
    fi
}

# Create database and user - SIMPLIFIED AND ROBUST
create_database_and_user() {
    log_info "Creating database and user..."
    
    # Single comprehensive SQL block that handles everything
    cat << SQL_EOF | docker exec -i bluespice-database mariadb -h localhost -P 3306 -u"$DB_ROOT_USER" -p"$DB_ROOT_PASS"
-- Create database
CREATE DATABASE IF NOT EXISTS \`$DB_NAME\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Drop existing users to ensure clean state
DROP USER IF EXISTS '$DB_USER'@'%';
DROP USER IF EXISTS '$DB_USER'@'localhost';
DROP USER IF EXISTS '$DB_USER'@'%.bluespice-network';
DROP USER IF EXISTS '$DB_USER'@'localhost';
DROP USER IF EXISTS '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network';

-- Create users with all necessary hostname patterns
CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'%.bluespice-network' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network' IDENTIFIED BY '$DB_PASS';

-- Grant all privileges to all hostname patterns

-- Grant SET USER privilege for handling DEFINER clauses while maintaining database isolation
GRANT SET USER ON *.* TO '$DB_USER'@'%';
GRANT SET USER ON *.* TO '$DB_USER'@'localhost';
GRANT SET USER ON *.* TO '$DB_USER'@'%.bluespice-network';
GRANT SET USER ON *.* TO '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network';

-- Ensure specific database permissions
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'localhost';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%.bluespice-network';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network';

FLUSH PRIVILEGES;
SQL_EOF
    
    log_info "Database and user created successfully"
}

# Generate admin password
generate_admin_password() {
    local password_file="/data/bluespice/initialAdminPassword"
    
    if [ -f "$password_file" ]; then
        log_info "Using existing admin password from $password_file"
        local existing_password=$(cat "$password_file")
        log_info "  Admin user: WikiSysop"
        log_info "  Password: ${existing_password:0:1}********${existing_password: -1}"
        log_info "  (Password file already exists - not generating new one)"
    else
        log_info "Generating initial admin password..."
        
        # Generate a random password
        local admin_password
        admin_password=$(openssl rand -base64 18)
        echo "$admin_password" > "$password_file"
        
        log_info "Initial admin password generated and saved"
        log_info "  Admin user: WikiSysop"
        log_info "  Password: $admin_password"
        log_info "  Please save this password - it will be displayed only once!"
    fi
}

# Create BlueSpice initialization files
create_bluespice_files() {
    local container="${CONTAINER_PREFIX}-wiki-web"
    
    log_info "Creating BlueSpice initialization files..."

    # Fix MediaWiki installer to use socket connection with synchronized password
    log_info "Patching MediaWiki installer to use DB_ROOT credentials..."
    docker exec "$container" sed -i "s/installdbuser=${DB_USER}/installdbuser=${DB_USER}/" /app/bin/run-installation.d/020-install-database
    docker exec "$container" sed -i "s/installdbpass=${DB_PASS}/installdbpass=${DB_PASS}/" /app/bin/run-installation.d/020-install-database
    # Force table creation even if installer thinks they exist
    log_info "Patching installer to force table creation..."
    # Patch installer to use socket connections
    log_info "Patching installer to use socket connections..."
    docker exec "$container" bash -c 'cat > /app/bin/run-installation.d/020-install-database << "SOCKET_PATCH_EOF"
#!/bin/bash

# Set required environment variables for MediaWiki installer
export WIKI_NAME="Test1"
export adminUserName="WikiSysop"
export adminPass="$(cat /data/bluespice/initialAdminPassword)"

installdbuser=${DB_USER}
installdbpass=${DB_PASS}
lang=${WIKI_LANG:-en}
timestamp=$(date +%Y%m%d_%H%M%S)
appDir="/app/bluespice/w"

echo "=== SOCKET-BASED DATABASE INSTALLATION ==="
echo "Installing database with values:"
echo "dbserver: localhost (socket)"
echo "dbname: $DB_NAME"
echo "dbuser: $DB_USER"
echo "dbpass: ${DB_PASS:0:1}********${DB_PASS: -1}"
echo "installdbuser: $installdbuser"
echo "installdbpass: ${installdbpass:0:1}********${installdbpass: -1}"
echo "lang: $lang"
echo "admin user: $adminUserName"
echo "pass: ${adminPass:0:1}********${adminPass: -1}"
echo "wiki name: $WIKI_NAME"
echo "timestamp: $timestamp"
echo ""

# Remove any existing LocalSettings.php
if [ -f $appDir/LocalSettings.php ]; then
    echo "Removing existing LocalSettings.php"
    rm -f $appDir/LocalSettings.php
fi

# Clear installation markers
rm -f $appDir/.installation_complete
rm -f /data/bluespice/.installation_complete

echo "Starting MediaWiki installation using socket connection..."

# Install using socket connection (localhost will use the socket proxy)
php $appDir/maintenance/install.php \
    --force \
    --dbtype=mysql \
    --dbserver=localhost \
    --dbname=$DB_NAME \
    --installdbuser=$installdbuser \
    --installdbpass=$installdbpass \
    --dbuser=$DB_USER \
    --dbpass=$DB_PASS \
    --pass=$adminPass \
    --lang=$lang \
    --scriptpath=/w \
    --server="$WIKI_SERVER" \
    "$WIKI_NAME" \
    "$adminUserName" \
    2>&1 | tee -a /data/bluespice/logs/install-$timestamp.log

INSTALL_RESULT=${PIPESTATUS[0]}

if [ $INSTALL_RESULT -eq 0 ]; then
    echo "✓ MediaWiki installation completed successfully"
    touch /data/bluespice/.installation_complete
    echo "$(date): Socket-based installation completed successfully" >> /data/bluespice/logs/install-$timestamp.log
else
    echo "✗ MediaWiki installation failed"
    echo "$(date): Installation failed with exit code $INSTALL_RESULT" >> /data/bluespice/logs/install-$timestamp.log
    exit 1
fi

# Remove the generated LocalSettings.php as BlueSpice uses its own
if [ -f $appDir/LocalSettings.php ]; then
    echo "Removing generated LocalSettings.php (BlueSpice uses its own configuration)"
    rm $appDir/LocalSettings.php
fi

echo "=== SOCKET INSTALLATION COMPLETE ==="
SOCKET_PATCH_EOF'
    
    # Make the patched script executable
    docker exec "$container" chmod +x /app/bin/run-installation.d/020-install-database
    log_info "Installer patched for socket connections"
    log_info "MediaWiki installer patched for socket connection"


    log_info "Database users configured during creation - no additional sync needed"

    # Setup socket proxy for MediaWiki installer
    log_info "Setting up socket proxy for MediaWiki installer..."
    setup_socket_proxy "$container"
    log_info "Socket proxy configured successfully"
    
    # Create subdirectories including logs and simplesamlphp
    mkdir -p /data/simplesamlphp/certs
    sudo chown -R root:bluespice /data/simplesamlphp
    
    # Create pre-init-settings.php
    sudo sh -c "echo '<?php' > ${DATA_DIR}/bluespice/pre-init-settings.php"
    
    # Create post-init-settings.php with SMTP configuration
    # Load environment variables from .env file
        # shellcheck source=/dev/null
    if [[ -f ".env" ]]; then
        source .env
    fi
    
    cat > /tmp/post-init-settings.php << 'INIT_EOF'
<?php

/*
#enable the LUA system
#wfLoadExtension( 'Scribunto' );
#$wgScribuntoDefaultEngine = 'luastandalone';
*/

# Override the default with a bundle of filetypes:
$wgFileExtensions = array('png', 'gif', 'jpg', 'jpeg', 'ppt', 'pdf', 
'psd', 'mp3', 'xls', 'xlsx', 'doc','docx', 'mp4', 'mov', 'ico' );

$wgCookieExpiration = 86400;
$wgExtendedLoginCookieExpiration = null;
INIT_EOF

    # Inject SMTP configuration using environment variables
    cat >> /tmp/post-init-settings.php << SMTP_EOF

    # Ensure target directory exists
    sudo mkdir -p "${DATA_DIR}/bluespice"

\$wgSMTP = [
    'host'     => '${SMTP_HOST}',
    'IDHost'   => '${WIKI_HOST}',
    'port'     => ${SMTP_PORT},
    'auth'     => true,
    'username' => '${SMTP_USER}',
    'password' => '${SMTP_PASS}'
];
SMTP_EOF

    sudo cp /tmp/post-init-settings.php "${DATA_DIR}/bluespice/post-init-settings.php" && sudo rm -f /tmp/post-init-settings.php
    
    log_info "BlueSpice initialization files created"
}

# Run BlueSpice installation - let it work as designed
run_bluespice_install() {
    local container="${CONTAINER_PREFIX}-wiki-web"
    local admin_password
    admin_password=$(cat "/data/bluespice/initialAdminPassword")
    
    log_info "Running BlueSpice installation..."
    
    # Let BlueSpice use its original installation process without modifications
    # Set environment variables for the installation
    docker exec -e "WIKI_INITIAL_ADMIN_USER=WikiSysop" \
                -e "WIKI_INITIAL_ADMIN_PASS=$admin_password" \
                -e "WIKI_PROTOCOL=https" \
                -e "WIKI_HOST=$WIKI_FQDN" \
                -e "WIKI_PORT=443" \
                "$container" /app/bin/run-installation
    
    log_info "BlueSpice installation completed"
}

# Run maintenance script
run_maintenance_script() {
    local container="${CONTAINER_PREFIX}-wiki-web"
    
    log_info "Running maintenance script..."
    
    docker exec "$container" /app/bin/run-maintenance update --quick --doshared
    
    log_info "Maintenance script completed"
}


# Retry search index build if it failed during installation
retry_search_index_build() {
    local container="${CONTAINER_PREFIX}-wiki-web"
    
    log_info "Verifying search index build..."
    
    # Check if we can access the database tables first
    local table_check_result
    table_check_result=$(docker exec "$container" php -r "
        require_once '/app/bluespice/w/includes/WebStart.php';
        try {
            \$dbr = wfGetDB( DB_REPLICA );
            \$result = \$dbr->tableExists('page');
            echo \$result ? 'exists' : 'missing';
        } catch (Exception \$e) {
            echo 'error: ' . \$e->getMessage();
        }
    " 2>/dev/null || echo "error")
    
    if [[ "$table_check_result" == "exists" ]]; then
        log_info "Database tables verified, attempting to rebuild search index..."
        
        # Try to rebuild the search index with proper error handling
        if docker exec "$container" php /app/bluespice/w/extensions/BlueSpiceExtendedSearch/maintenance/rebuildIndex.php 2>/dev/null; then
            log_info "Search index rebuild completed successfully"
        else
            log_info "Search index rebuild skipped or failed (this is non-critical for wiki functionality)"
        fi
    else
        log_info "Database tables not fully ready, skipping search index rebuild"
        log_info "Search index can be rebuilt later using maintenance scripts"
    fi
}

# Main deployment function
deploy_wiki() {
    echo "BlueSpice Wiki Deployment"
    echo "========================="
    
    load_environment
    create_data_directories
    fix_data_permissions
    
    echo "Wiki Name: $WIKI_NAME"
    echo "Domain: $WIKI_FQDN"
    echo "Data Directory: $DATA_DIR"
    echo "Container Prefix: $CONTAINER_PREFIX"
    echo ""
    
    if [[ "$FRESH_INSTALL" == "true" ]]; then
        log_info "Performing fresh installation..."
        
        # Run prepare service to initialize data structure
        log_info "Running prepare service to initialize data structure..."
        
        # Get docker compose files
        local compose_files=""
        if [[ -f "/core/wikis/${WIKI_NAME}/docker-compose.main.yml" ]]; then
            compose_files="$compose_files -f /core/wikis/${WIKI_NAME}/docker-compose.main.yml"
        fi
        if [[ -f "/core/wikis/${WIKI_NAME}/docker-compose.helper-service.yml" ]]; then
            compose_files="$compose_files -f /core/wikis/${WIKI_NAME}/docker-compose.helper-service.yml"
        fi
        
        # Start services
        log_info "Starting BlueSpice wiki services..."
        cd "/core/wikis/${WIKI_NAME}"
        eval "docker compose $compose_files up -d"
        
        # Stop task container temporarily to prevent database connection issues
        log_info "Stopping task container temporarily..."
        docker stop "${CONTAINER_PREFIX}-wiki-task" || true
        
        sleep 10
        
        if wait_for_healthy "${CONTAINER_PREFIX}-wiki-web"; then
            # Run installation with correct environment
            test_database_connectivity
            create_database_and_user
            generate_admin_password
            create_bluespice_files
            run_bluespice_install
            run_maintenance_script
            retry_search_index_build
            
            # Now restart the task container
            log_info "Starting task container..."
            docker start "${CONTAINER_PREFIX}-wiki-task"
            
            log_info "Wiki deployment completed successfully!"
            echo ""
            echo "Access your wiki at: https://${WIKI_FQDN}"
            echo "Admin password saved in: /data/bluespice/initialAdminPassword"
        else
            log_error "Wiki deployment failed - container did not become healthy"
            exit 1
        fi
    else
        log_info "Starting existing wiki..."
        cd "/core/wikis/${WIKI_NAME}"
        docker compose -f docker-compose.main.yml -f docker-compose.helper-service.yml up -d
        log_info "Wiki started successfully!"
    fi
}

# Main execution
main() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: $0 --wiki-name=NAME [OPTIONS]"
        echo "Try '$0 --help' for more information."
        exit 1
    fi
    
    parse_arguments "$@"
    deploy_wiki
}

# Execute main function with all arguments
main "$@"

# Function to setup socket proxy for MediaWiki installer
