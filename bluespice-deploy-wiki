#!/bin/bash
set -euo pipefail

# BlueSpice Wiki Deployment Script
# Rewritten to work correctly with pre-existing container system

# Default values
WIKI_NAME=""
FRESH_INSTALL="false"
export UPGRADE_ACTION=""
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
# Source logging functions
# shellcheck disable=SC1091
source "${SCRIPT_DIR}/lib/logging.sh"
# Source docker utilities
# shellcheck disable=SC1091
source "${SCRIPT_DIR}/lib/docker-utils.sh"

# Colors for output
# shellcheck disable=SC2034
RED='\033[0;31m'
# shellcheck disable=SC2034
GREEN='\033[0;32m'
# shellcheck disable=SC2034
YELLOW='\033[1;33m'
# shellcheck disable=SC2034
NC='\033[0m' # No Color

# Help function
show_help() {
    cat << 'HELP'
BlueSpice Wiki Deployment Script
===============================

SYNOPSIS:
    ./bluespice-deploy-wiki --wiki-name=NAME [OPTIONS]

DESCRIPTION:
    Deploys and manages BlueSpice wiki instances with enhanced database connectivity,
    network connection support, and automated configuration management.

REQUIRED ARGUMENTS:
    --wiki-name=NAME        Name of the wiki instance to deploy/manage
                           Must match an existing wiki directory in /core/wikis/

OPTIONS:
    --fresh-install        Perform a fresh installation (removes existing data)
    --run-update          Run update/upgrade procedures on existing wiki
    --profile=upgrade     Run standard upgrade pipeline
    --profile=upgrade-force   Force upgrade pipeline (use with caution)
    -h, --help            Show this help message and exit

FEATURES:
    • Enhanced network connection management for improved database performance
    • Unique database user creation per wiki instance (e.g., wikiname_user)
    • Comprehensive health checks and verification procedures
    • SSL certificate integration and management
    • Email/SMTP configuration validation
    • Automated service orchestration with Docker Compose

DEPLOYMENT PROCESS:
    1. Environment validation and configuration loading
    2. Database connectivity verification
    3. Unique user authentication setup with network connections
    4. MediaWiki installation/update procedures
    5. BlueSpice-specific configuration and extensions
    6. Service health checks and verification
    7. Post-deployment cleanup and optimization

DATABASE CONNECTIVITY:
    • Uses direct database host connections
    • Creates unique database users per wiki (PREFIX_user format)
    • Enhanced database user management
    • Enhanced error handling for connection issues
    • Improved performance through local socket communication

UPGRADE PROFILES:
    upgrade         Standard upgrade process with safety checks
    upgrade-force   Forced upgrade bypassing some safety checks
                   (Use only when standard upgrade fails)

EXAMPLES:
    # Deploy a new wiki instance
    ./bluespice-deploy-wiki --wiki-name=my-wiki --fresh-install

    # Update an existing wiki
    ./bluespice-deploy-wiki --wiki-name=my-wiki --run-update

    # Perform standard upgrade
    ./bluespice-deploy-wiki --wiki-name=my-wiki --profile=upgrade

    # Force upgrade (emergency use)
    ./bluespice-deploy-wiki --wiki-name=my-wiki --profile=upgrade-force

    # Show help
    ./bluespice-deploy-wiki --help

PREREQUISITES:
    • Wiki instance directory must exist in /core/wikis/WIKI_NAME/
    • Valid .env configuration file in the wiki directory
    • BlueSpice database service must be running and accessible
    • Docker and Docker Compose must be available
    • Sufficient disk space and memory resources

FILES AND DIRECTORIES:
    /core/wikis/WIKI_NAME/.env              Environment configuration
    /core/wikis/WIKI_NAME/docker-compose.*  Service orchestration files
    ${DATA_DIR}/${WIKI_NAME}/initialAdminPassword Generated admin credentials
    /bluespice/                             Persistent data storage

TROUBLESHOOTING:
    • Database connection issues: Check socket connectivity and user permissions
    • Service startup failures: Verify Docker daemon and resource availability
    • SSL problems: Check certificate validity and Let's Encrypt configuration
    • Permission errors: Ensure proper directory ownership and Docker access

EXIT CODES:
    0   Success
    1   General error (invalid arguments, missing requirements)
    2   Database connectivity failure
    3   Service deployment failure
    4   Configuration validation failure

For more information, see the BlueSpice documentation or contact support.
HELP
}

# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            --wiki-name=*)
                WIKI_NAME="${1#*=}"
                shift
                ;;
            --fresh-install)
                FRESH_INSTALL="true"
                shift
                ;;
            --run-update)
                shift
                ;;
            --profile=upgrade)
                export UPGRADE_ACTION="/app/bin/upgrade-pipeline"
                shift
                ;;
            --profile=upgrade-force)
                export UPGRADE_ACTION="/app/bin/upgrade-pipeline --force"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done

    if [[ -z "$WIKI_NAME" ]]; then
        log_error "Wiki name is required. Use --wiki-name=NAME"
        exit 1
    fi
}

# USED
# Create required data directories
create_data_directories() {
    log_info "Creating required directories for $WIKI_NAME..."
    
    # Create wiki-specific data directory on host
    local wiki_data_dir="${DATA_DIR}/${WIKI_NAME}"
    if [[ ! -d "$wiki_data_dir" ]]; then
        log_info "Creating wiki data directory: $wiki_data_dir"
        mkdir -p "$wiki_data_dir"
    fi
    
    
    local container="${CONTAINER_PREFIX}-wiki-web"
    
    # Ensure /data directory is writable by bluespice user
    docker_set_ownership "$WIKI_NAME" "/data"
    
    # Create dummy MySQL socket directory to satisfy PHP configuration
    docker_exec_safe "$WIKI_NAME" "mkdir -p /run/mysqld"
    docker_exec_safe "$WIKI_NAME" "chown -R bluespice:bluespice /run/mysqld"
    
    # Create BlueSpice-specific subdirectories that containers expect
    # These paths are inside the container at /data/bluespice
    docker_exec_safe "$WIKI_NAME" "mkdir -p /data/bluespice/logs"
    docker_exec_safe "$WIKI_NAME" "mkdir -p /data/bluespice/simplesamlphp/certs"
    docker_exec_safe "$WIKI_NAME" "mkdir -p /data/bluespice/database"
    docker_exec_safe "$WIKI_NAME" "mkdir -p /data/bluespice/search"
    docker_exec_safe "$WIKI_NAME" "mkdir -p /data/bluespice/bluespice"
    
    # Ensure the entire /data/bluespice has correct ownership first
    docker_exec_safe "$WIKI_NAME" "chown -R bluespice:bluespice /data/bluespice"

    # Set proper ownership inside container
    docker_exec_safe "$WIKI_NAME" "chown -R bluespice:bluespice /data/bluespice/database"
    docker_exec_safe "$WIKI_NAME" "chown -R bluespice:bluespice /data/bluespice/bluespice"
    docker_exec_safe "$WIKI_NAME" "chown -R bluespice:bluespice /data/bluespice/simplesamlphp"
    docker_exec_safe "$WIKI_NAME" "chown -R bluespice:bluespice /data/bluespice/search"
    docker_exec_safe "$WIKI_NAME" "chown -R bluespice:bluespice /data/bluespice/logs"
    
    # Ensure temp directory for UUID generator used by GlobalIdGenerator
    docker_exec_safe "$WIKI_NAME" "mkdir -p /tmp/${WIKI_NAME}"
    docker_exec_safe "$WIKI_NAME" "chown -R bluespice:bluespice /tmp/${WIKI_NAME}"

    # Ensure SimpleSAMLphp cert directory for scripts expecting /data/simplesamlphp/certs
    docker_exec_safe "$WIKI_NAME" "mkdir -p /data/simplesamlphp/certs"
    docker_exec_safe "$WIKI_NAME" "chown -R 1002:bluespice /data/simplesamlphp"

    log_info "Data directories created for $WIKI_NAME"
}

# USED but does nothing
# Fix data directory permissions for BlueSpice
fix_data_permissions() {
    log_info "Fixing data directory permissions for $WIKI_NAME..."
    
    # The wiki-specific data directory needs to be writable by the bluespice user (UID 1002)
    local wiki_data_dir="${DATA_DIR}/${WIKI_NAME}"
    # sudo chown -R 1002:bluespice "$wiki_data_dir" 2>/dev/null || true
    # sudo chmod -R 775 "$wiki_data_dir" 2>/dev/null || true
    
    log_info "Data directory permissions fixed for $WIKI_NAME"
}

# USED
# Wait for container to be healthy
wait_for_healthy() {
    local container="$1"
    local max_attempts=30
    local attempt=1
    
    log_info "Waiting for $container to be healthy..."
    
    while [[ $attempt -le $max_attempts ]]; do
        if docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null | grep -q "healthy"; then
            log_info "$container is healthy"
            return 0
        fi
        
        log_warn "Attempt $attempt/$max_attempts: $container not yet healthy, waiting..."
        sleep 10
        ((attempt++))
    done
    
    log_error "$container failed to become healthy after $max_attempts attempts"
    return 1
}

# USED
# Test database connectivity
test_database_connectivity() {
    log_info "Testing database connectivity..."
    
    # Test connection directly to the database container using mariadb
    if docker exec bluespice-database mariadb -u"$DB_ROOT_USER" -p"$DB_ROOT_PASS" -e "SELECT 1;" >/dev/null 2>&1; then
        log_info "Database connectivity verified"
        return 0
    else
        log_error "Database connectivity test failed"
        return 1
    fi
}

# USED
# Create database and user
create_database_and_user() {
    log_info "Creating database and user..."
    
    # Single comprehensive SQL block that handles everything
    cat <<SQL_EOF | docker exec -i bluespice-database mariadb -u"$DB_ROOT_USER" -p"$DB_ROOT_PASS"
-- Create database
CREATE DATABASE IF NOT EXISTS \`$DB_NAME\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Drop existing users to ensure clean state
DROP USER IF EXISTS '$DB_USER'@'%';
DROP USER IF EXISTS '$DB_USER'@'localhost';
DROP USER IF EXISTS '$DB_USER'@'%.bluespice-network';
DROP USER IF EXISTS '$DB_USER'@'localhost';
DROP USER IF EXISTS '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network';

-- Create users with all necessary hostname patterns
CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'%.bluespice-network' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network' IDENTIFIED BY '$DB_PASS';

-- Grant all privileges to all hostname patterns

-- Grant SET USER privilege for handling DEFINER clauses while maintaining database isolation
GRANT SET USER ON *.* TO '$DB_USER'@'%';
GRANT SET USER ON *.* TO '$DB_USER'@'localhost';
GRANT SET USER ON *.* TO '$DB_USER'@'%.bluespice-network';
GRANT SET USER ON *.* TO '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network';

-- Ensure specific database permissions
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'localhost';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%.bluespice-network';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network';

FLUSH PRIVILEGES;
SQL_EOF
    
    log_info "Database and user created successfully"
}

# USED
# Generate admin password
generate_admin_password() {
    local password_file="${DATA_DIR}/${WIKI_NAME}/initialAdminPassword"
    
    if [ -f "$password_file" ]; then
        log_info "Using existing admin password from $password_file"
        local existing_password
        existing_password=$(cat "$password_file")
        log_info "  Admin user: WikiSysop"
        log_info "  Password: ${existing_password:0:1}********${existing_password: -1}"
        log_info "  (Password file already exists - not generating new one)"
    else
        log_info "Generating initial admin password..."
        
        # Generate a random password
        local admin_password
        admin_password=$(openssl rand -base64 18)
        echo "$admin_password" > "$password_file"
        
        log_info "Initial admin password generated and saved"
    fi
}

# USED
# Create BlueSpice initialization files
create_bluespice_files() {
    # Ensure /data directory is writable by bluespice user
    docker_exec_safe "$WIKI_NAME" "chown bluespice:bluespice /data"
    docker_exec_safe "$WIKI_NAME" "chmod 755 /data"
    
    # Create dummy MySQL socket directory to satisfy PHP configuration
    docker_exec_safe "$WIKI_NAME" "mkdir -p /run/mysqld"
    docker_exec_safe "$WIKI_NAME" "chmod 777 /run/mysqld"
    
    log_info "Creating BlueSpice initialization files..."

    # Fix MediaWiki installer to use network connection with synchronized password
    log_info "Patching MediaWiki installer to use DB_ROOT credentials..."
    docker_exec_safe "$WIKI_NAME" "sed -i 's/installdbuser=\${DB_USER}/installdbuser=\${DB_USER}/' /app/bin/run-installation.d/020-install-database"
    docker_exec_safe "$WIKI_NAME" "sed -i 's/installdbpass=\${DB_PASS}/installdbpass=\${DB_PASS}/' /app/bin/run-installation.d/020-install-database"
    
    # this line may be malformed and broken
    # docker_exec_safe "$container" 'bash -c "cat > /app/bin/run-installation.d/020-install-database << \"SOCKET_PATCH_EOF\""'
}

# USED
# Run BlueSpice installation
run_bluespice_install() {
    # Ensure /data directory is writable by bluespice user
    docker_exec_safe "$WIKI_NAME" "chown bluespice:bluespice /data"
    docker_exec_safe "$WIKI_NAME" "chmod 755 /data"
    
    # Create dummy MySQL socket directory to satisfy PHP configuration
    docker_exec_safe "$WIKI_NAME" "mkdir -p /run/mysqld"
    docker_exec_safe "$WIKI_NAME" "chmod 777 /run/mysqld"
    local admin_password
    admin_password=$(cat "${DATA_DIR}/${WIKI_NAME}/initialAdminPassword")
    
    # Verify the password file exists inside the container
    if ! docker_exec_safe "$WIKI_NAME" "test -f /data/bluespice/initialAdminPassword"; then
        log_info "Password file not found in container, creating it..."
        docker_exec_safe "$WIKI_NAME" "echo '$admin_password' > /data/bluespice/initialAdminPassword"
        docker_exec_safe "$WIKI_NAME" "chown bluespice:bluespice /data/bluespice/initialAdminPassword"
        docker_exec_safe "$WIKI_NAME" "chmod 600 /data/bluespice/initialAdminPassword"
    fi
    
    log_info "Running BlueSpice installation..."
    
    # Let BlueSpice use its original installation process without modifications
    # Set environment variables for the installation
    local container_name="bluespice-${WIKI_NAME}-wiki-web"
    docker exec -e "WIKI_INITIAL_ADMIN_USER=WikiSysop" \
                -e "WIKI_INITIAL_ADMIN_PASS=$admin_password" \
                -e "WIKI_PROTOCOL=https" \
                -e "WIKI_HOST=$WIKI_FQDN" \
                -e "WIKI_PORT=443" \
                "$container_name" /app/bin/run-installation
    
    log_info "BlueSpice installation completed"
}

# USED
# Run maintenance script
run_maintenance_script() {
    log_info "Running maintenance script..."
    docker_exec_safe "$WIKI_NAME" "/app/bin/run-maintenance update.php --quick --doshared"
}

# Main deployment function
deploy_wiki() {
    if [[ "$FRESH_INSTALL" == "true" ]]; then
        log_info "Performing fresh installation..."
        
        # Get docker compose files
        local compose_files=""
        if [[ -f "/core/wikis/${WIKI_NAME}/docker-compose.main.yml" ]]; then
            compose_files="$compose_files -f /core/wikis/${WIKI_NAME}/docker-compose.main.yml"
        fi
        if [[ -f "/core/wikis/${WIKI_NAME}/docker-compose.helper-service.yml" ]]; then
            compose_files="$compose_files -f /core/wikis/${WIKI_NAME}/docker-compose.helper-service.yml"
        fi
        
        # Start services
        log_info "Starting BlueSpice wiki services..."
        cd "/core/wikis/${WIKI_NAME}"
        eval "docker compose $compose_files up -d"
        
        # Stop task container temporarily to prevent database connection issues
        log_info "Stopping task container temporarily..."
        docker stop "${CONTAINER_PREFIX}-wiki-task"
        sleep 10
        
        if wait_for_healthy "${CONTAINER_PREFIX}-wiki-web"; then
            # Create data directories and fix permissions after containers are running
            create_data_directories
            #fix_data_permissions

            # Run installation with correct environment
            test_database_connectivity
            create_database_and_user
            generate_admin_password
            create_bluespice_files
            run_bluespice_install
                        
            # Now restart the task container
            log_info "Starting task container..."
            docker start "${CONTAINER_PREFIX}-wiki-task"

            # Ensure temp directory exists in task container as well
            docker_exec_safe "$WIKI_NAME" "mkdir -p /tmp/${WIKI_NAME} && chmod 1777 /tmp/${WIKI_NAME}"
        else
            log_error "Wiki deployment failed - container did not become healthy"
            exit 1
        fi
    else
        log_info "Starting existing wiki..."
        cd "/core/wikis/${WIKI_NAME}"
        docker compose -f docker-compose.main.yml -f docker-compose.helper-service.yml up -d
        
        # Ensure temp directory exists in web container after start
        docker_exec_safe "$WIKI_NAME" "mkdir -p /tmp/${WIKI_NAME} && chmod 1777 /tmp/${WIKI_NAME}"

        log_info "Wiki started successfully!"
    fi
}

# Load environment for the specified wiki
load_environment() {
    local wiki_dir="/core/wikis/${WIKI_NAME}"
    if [[ -f "$wiki_dir/.env" ]]; then
        set -a
        source "$wiki_dir/.env"
        set +a
        log_info "Environment loaded from $wiki_dir/.env"
        
        # Load shared environment for database credentials
        if [[ -f "${SCRIPT_DIR}/shared/.shared.env" ]]; then
            # Preserve wiki DATA_DIR before loading shared environment
            WIKI_DATA_DIR="$DATA_DIR"
            # shellcheck source=/dev/null
            source "${SCRIPT_DIR}/shared/.shared.env"
            # Restore wiki DATA_DIR after loading shared environment
            DATA_DIR="$WIKI_DATA_DIR"
        fi
        
        # Set default values for missing variables
        WIKI_FQDN="${WIKI_HOST:-${VIRTUAL_HOST:-localhost}}"
        DB_ROOT_USER="${DB_ROOT_USER:-root}"
        WIKI_LANG="${WIKI_LANG:-en}"
        
    else
        log_error "Environment file not found: $wiki_dir/.env"
        exit 1
    fi
}

# Main execution
main() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: $0 --wiki-name=NAME [OPTIONS]"
        echo "Try '$0 --help' for more information."
        exit 1
    fi
    
    parse_arguments "$@"
    load_environment
    deploy_wiki
}

# Execute main function with all arguments
main "$@"


