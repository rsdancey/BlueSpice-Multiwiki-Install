#!/bin/bash
set -euo pipefail

# BlueSpice Wiki Deployment Script
# Rewritten to work correctly with pre-existing container system

# Default values
WIKI_NAME=""
FRESH_INSTALL="false"
export UPGRADE_ACTION=""
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}✓${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

# Load environment variables
load_environment() {
    if [[ -f "/core/wikis/${WIKI_NAME}/.env" ]]; then
        set -a
        # shellcheck source=/dev/null
        source "/core/wikis/${WIKI_NAME}/.env"
        set +a
        log_info "Environment loaded from /core/wikis/${WIKI_NAME}/.env"
        
        # Load shared environment for database credentials
        if [[ -f "${SCRIPT_DIR}/shared/.shared.env" ]]; then
            # shellcheck source=/dev/null
            source "${SCRIPT_DIR}/shared/.shared.env"
        fi
        
        # Set default values for missing variables
        WIKI_FQDN="${WIKI_HOST:-${VIRTUAL_HOST:-localhost}}"
        DB_ROOT_USER="${DB_ROOT_USER:-root}"
        WIKI_LANG="${WIKI_LANG:-en}"
        
    else
        log_error "Environment file not found: /core/wikis/${WIKI_NAME}/.env"
        exit 1
    fi
}

# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --wiki-name=*)
                WIKI_NAME="${1#*=}"
                shift
                ;;
            --fresh-install)
                FRESH_INSTALL="true"
                shift
                ;;
            --run-update)
                shift
                ;;
            --profile=upgrade)
                export UPGRADE_ACTION="/app/bin/upgrade-pipeline"
                shift
                ;;
            --profile=upgrade-force)
                export UPGRADE_ACTION="/app/bin/upgrade-pipeline --force"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done

    if [[ -z "$WIKI_NAME" ]]; then
        log_error "Wiki name is required. Use --wiki-name=NAME"
        exit 1
    fi
}

# Create required data directories
create_data_directories() {
    log_info "Creating required directories..."
    # DATA_DIR is set in sourced .env files
    
    # shellcheck disable=SC2153
    local data_dir="${DATA_DIR}"
    
    # Create directory structure
    sudo mkdir -p "${data_dir}"/{database,proxy,search,bluespice}
    sudo mkdir -p "${data_dir}/wiki"/{database,wiki,search}
    
    # Set proper ownership
    sudo chown -R 911:911 "${data_dir}/database" 2>/dev/null || true
    sudo chown -R 911:911 "${data_dir}/wiki/database" 2>/dev/null || true
    sudo chown -R 1002:bluespice "${data_dir}/bluespice" 2>/dev/null || true
    sudo chown -R 1002:bluespice "${data_dir}/wiki/wiki" 2>/dev/null || true
    sudo chown -R 1000:1000 "${data_dir}/search" 2>/dev/null || true
    sudo chown -R 1000:1000 "${data_dir}/wiki/search" 2>/dev/null || true
    sudo chown -R root:root "${data_dir}/proxy" 2>/dev/null || true
    
    log_info "Data directories created"
}

# Fix data directory permissions for BlueSpice
fix_data_permissions() {
    log_info "Fixing data directory permissions..."
    
    # The main data directory needs to be writable by the bluespice user (UID 1002)
    # This is mounted as /data inside the container
    sudo chown 1002:bluespice /data/bluespice 2>/dev/null || true
    
    # Ensure the bluespice user can write to the mounted data directory
    sudo chmod -R 777 /data/ 2>/dev/null || true
    
    log_info "Data directory permissions fixed"
}

# Wait for container to be healthy
wait_for_healthy() {
    local container="$1"
    local max_attempts=30
    local attempt=1
    
    log_info "Waiting for $container to be healthy..."
    
    while [[ $attempt -le $max_attempts ]]; do
        if docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null | grep -q "healthy"; then
            log_info "$container is healthy"
            return 0
        fi
        
        log_warn "Attempt $attempt/$max_attempts: $container not yet healthy, waiting..."
        sleep 10
        ((attempt++))
    done
    
    log_error "$container failed to become healthy after $max_attempts attempts"
    return 1
}

# Test database connectivity
test_database_connectivity() {
    log_info "Verifying database network connectivity..."
    log_info "Testing database connectivity..."
    
    # Test connection directly to the database container using mariadb
    if docker exec bluespice-database mariadb -u"$DB_ROOT_USER" -p"$DB_ROOT_PASS" -e "SELECT 1;" >/dev/null 2>&1; then
        log_info "Database connectivity verified"
        return 0
    else
        log_error "Database connectivity test failed"
        return 1
    fi
}

# Create database and user - SIMPLIFIED AND ROBUST
create_database_and_user() {
    log_info "Creating database and user..."
    
    # Single comprehensive SQL block that handles everything
    cat << SQL_EOF | docker exec -i bluespice-database mariadb -u"$DB_ROOT_USER" -p"$DB_ROOT_PASS"
-- Create database
CREATE DATABASE IF NOT EXISTS \`$DB_NAME\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Drop existing users to ensure clean state
DROP USER IF EXISTS '$DB_USER'@'%';
DROP USER IF EXISTS '$DB_USER'@'localhost';
DROP USER IF EXISTS '$DB_USER'@'%.bluespice-network';
DROP USER IF EXISTS '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network';

-- Create users with all necessary hostname patterns
CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'%.bluespice-network' IDENTIFIED BY '$DB_PASS';
CREATE USER '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network' IDENTIFIED BY '$DB_PASS';

-- Grant all privileges to all hostname patterns
GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'%' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'localhost' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'%.bluespice-network' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network' WITH GRANT OPTION;

-- Ensure specific database permissions
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'localhost';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%.bluespice-network';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'bluespice-wiki-wiki-web.bluespice-network';

FLUSH PRIVILEGES;
SQL_EOF
    
    log_info "Database and user created successfully"
}

# Generate admin password
generate_admin_password() {
    local password_file="/core/wikis/${WIKI_NAME}/admin_password.txt"
    
    log_info "Generating initial admin password..."
    
    # Generate a random password
    local admin_password
    admin_password=$(openssl rand -base64 18)
    echo "$admin_password" > "$password_file"
    chmod 600 "$password_file"
    
    log_info "Initial admin password generated and saved"
    log_info "  Admin user: WikiSysop"
    log_info "  Password: $admin_password"
    log_info "  Please save this password - it will be displayed only once!"
}

# Create BlueSpice initialization files
create_bluespice_files() {
    local container="${CONTAINER_PREFIX}-wiki-web"
    
    log_info "Creating BlueSpice initialization files..."

    # Fix MediaWiki installer to use socket connection with synchronized password
    log_info "Patching MediaWiki installer to use DB_ROOT credentials..."
    docker exec "$container" sed -i "s/installdbuser=${DB_USER}/installdbuser=${DB_USER}/" /app/bin/run-installation.d/020-install-database
    docker exec "$container" sed -i "s/installdbpass=${DB_PASS}/installdbpass=${DB_PASS}/" /app/bin/run-installation.d/020-install-database
    # Update installer to prefer socket connection (localhost) over TCP
    docker exec "$container" sed -i "s/--dbserver="'$DB_HOST'"/--dbserver=localhost/" /app/bin/run-installation.d/020-install-database
    log_info "MediaWiki installer patched for socket connection"

    log_info "Database users configured during creation - no additional sync needed"
    
    # Create subdirectories including logs and simplesamlphp
    mkdir -p /data/simplesamlphp/certs
    sudo chown -R root:bluespice /data/simplesamlphp
    
    # Create pre-init-settings.php
    sudo sh -c 'echo "<?php" > /data/bluespice/pre-init-settings.php'
    
    # Create post-init-settings.php with SMTP configuration
    # Load environment variables from .env file
    if [[ -f ".env" ]]; then
        source .env
    fi
    
    cat > /tmp/post-init-settings.php << 'INIT_EOF'
<?php

/*
#enable the LUA system
#wfLoadExtension( 'Scribunto' );
#$wgScribuntoDefaultEngine = 'luastandalone';
*/

# Override the default with a bundle of filetypes:
$wgFileExtensions = array('png', 'gif', 'jpg', 'jpeg', 'ppt', 'pdf', 
'psd', 'mp3', 'xls', 'xlsx', 'doc','docx', 'mp4', 'mov', 'ico' );

$wgCookieExpiration = 86400;
$wgExtendedLoginCookieExpiration = null;
INIT_EOF

    # Inject SMTP configuration using environment variables
    cat >> /tmp/post-init-settings.php << SMTP_EOF

\$wgSMTP = [
    'host'     => '${SMTP_HOST}',
    'IDHost'   => '${WIKI_HOST}',
    'port'     => ${SMTP_PORT},
    'auth'     => true,
    'username' => '${SMTP_USER}',
    'password' => '${SMTP_PASS}'
];
SMTP_EOF

    sudo mv /tmp/post-init-settings.php /data/bluespice/post-init-settings.php
    
    log_info "BlueSpice initialization files created"
}

# Run BlueSpice installation - let it work as designed
run_bluespice_install() {
    local container="${CONTAINER_PREFIX}-wiki-web"
    local admin_password
    admin_password=$(cat "/core/wikis/${WIKI_NAME}/admin_password.txt")
    
    log_info "Running BlueSpice installation..."
    
    # Let BlueSpice use its original installation process without modifications
    # Set environment variables for the installation
    docker exec -e "WIKI_INITIAL_ADMIN_USER=WikiSysop" \
                -e "WIKI_INITIAL_ADMIN_PASS=$admin_password" \
                -e "WIKI_PROTOCOL=https" \
                -e "WIKI_HOST=$WIKI_FQDN" \
                -e "WIKI_PORT=443" \
                "$container" /app/bin/run-installation
    
    log_info "BlueSpice installation completed"
}

# Run maintenance script
run_maintenance_script() {
    local container="${CONTAINER_PREFIX}-wiki-web"
    
    log_info "Running maintenance script..."
    
    docker exec "$container" /app/bin/run-updates
    
    log_info "Maintenance script completed"
}

# Main deployment function
deploy_wiki() {
    echo "BlueSpice Wiki Deployment"
    echo "========================="
    
    load_environment
    create_data_directories
    fix_data_permissions
    
    echo "Wiki Name: $WIKI_NAME"
    echo "Domain: $WIKI_FQDN"
    echo "Data Directory: $DATA_DIR"
    echo "Container Prefix: $CONTAINER_PREFIX"
    echo ""
    
    if [[ "$FRESH_INSTALL" == "true" ]]; then
        log_info "Performing fresh installation..."
        
        # Run prepare service to initialize data structure
        log_info "Running prepare service to initialize data structure..."
        
        # Get docker compose files
        local compose_files=""
        if [[ -f "/core/wikis/${WIKI_NAME}/docker-compose.main.yml" ]]; then
            compose_files="$compose_files -f /core/wikis/${WIKI_NAME}/docker-compose.main.yml"
        fi
        if [[ -f "/core/wikis/${WIKI_NAME}/docker-compose.helper-service.yml" ]]; then
            compose_files="$compose_files -f /core/wikis/${WIKI_NAME}/docker-compose.helper-service.yml"
        fi
        
        # Start services
        log_info "Starting BlueSpice wiki services..."
        cd "/core/wikis/${WIKI_NAME}"
        eval "docker compose $compose_files up -d"
        
        # Stop task container temporarily to prevent database connection issues
        log_info "Stopping task container temporarily..."
        docker stop "${CONTAINER_PREFIX}-wiki-task" || true
        
        sleep 10
        
        if wait_for_healthy "${CONTAINER_PREFIX}-wiki-web"; then
            # Run installation with correct environment
            test_database_connectivity
            create_database_and_user
            generate_admin_password
            create_bluespice_files
            run_bluespice_install
            run_maintenance_script
            
            # Now restart the task container
            log_info "Starting task container..."
            docker start "${CONTAINER_PREFIX}-wiki-task"
            
            log_info "Wiki deployment completed successfully!"
            echo ""
            echo "Access your wiki at: https://${WIKI_FQDN}"
            echo "Admin password saved in: /core/wikis/${WIKI_NAME}/admin_password.txt"
        else
            log_error "Wiki deployment failed - container did not become healthy"
            exit 1
        fi
    else
        log_info "Starting existing wiki..."
        cd "/core/wikis/${WIKI_NAME}"
        docker compose up -d
        log_info "Wiki started successfully!"
    fi
}

# Main execution
main() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: $0 --wiki-name=NAME [--fresh-install] [--run-update] [--profile=upgrade|upgrade-force]"
        exit 1
    fi
    
    parse_arguments "$@"
    deploy_wiki
}

# Execute main function with all arguments
main "$@"
