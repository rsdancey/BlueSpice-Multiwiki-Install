#!/bin/bash

# Setup shared services configuration for BlueSpice
# Configures Let's Encrypt email and initializes shared environment

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Configuration
SHARED_DIR="${SCRIPT_DIR}/shared"
GLOBAL_ENV="${SCRIPT_DIR}/.global.env"

# Function to prompt for email
prompt_email() {
    local email=""
    local shared_env="${SHARED_DIR}/.shared.env"
    
    # Check if ADMIN_MAIL exists in .shared.env
    if [[ -f "$shared_env" ]] && grep -q "^ADMIN_MAIL=" "$shared_env" 2>/dev/null; then
        existing_email=$(grep "^ADMIN_MAIL=" "$shared_env" | cut -d'=' -f2)
        read -r -p "Enter email address for Let's Encrypt (press Enter to use existing: $existing_email): " email
    else
        read -r -p "Enter email address for Let's Encrypt (or press Enter to skip): " email
    fi
    
    # If user pressed Enter and we have an existing admin mail, use it
    if [[ -z "$email" ]] && [[ -n "$existing_email" ]]; then
        email="$existing_email"
        echo "Using existing admin mail: $email"
    fi
    
    printf "%s" "$email"
}

# Function to update global environment
# Function to update both global and shared environment files
update_environment_files() {
    local email="$1"
    
    # Create global env if it doesn't exist
    if [[ ! -f "$GLOBAL_ENV" ]]; then
        cat > "$GLOBAL_ENV" << 'ENVEOF'
# Global BlueSpice Configuration
VERSION=5.1
EDITION=free
ENVEOF
    fi
    
    # Update global environment with Let's Encrypt email
    if [[ -n "$email" ]]; then
        if grep -q "LETSENCRYPT_EMAIL=" "$GLOBAL_ENV" 2>/dev/null; then
            sed -i "s|LETSENCRYPT_EMAIL=.*|LETSENCRYPT_EMAIL=$email|" "$GLOBAL_ENV"
        else
            echo "LETSENCRYPT_EMAIL=$email" >> "$GLOBAL_ENV"
        fi
        echo "✓ Let's Encrypt email configured in global env: $email"
    else
        echo "⚠ Skipping Let's Encrypt configuration"
    fi
    
    # Update shared environment with ADMIN_MAIL
    if [[ -n "$email" ]] && [[ -f "${SHARED_DIR}/.shared.env" ]]; then
        if grep -q "ADMIN_MAIL=" "${SHARED_DIR}/.shared.env" 2>/dev/null; then
            sed -i "s|ADMIN_MAIL=.*|ADMIN_MAIL=$email|" "${SHARED_DIR}/.shared.env"
        else
            echo "ADMIN_MAIL=$email" >> "${SHARED_DIR}/.shared.env"
        fi
        echo "✓ Admin email configured in shared env: $email"
    fi
}

# Function to initialize shared directory and environment file
init_shared_directory() {
    if [[ ! -d "$SHARED_DIR" ]]; then
        echo "Creating shared directory..."
        mkdir -p "$SHARED_DIR"
    fi
    
    # Create shared environment file if it does not exist
    local shared_env_file="${SHARED_DIR}/.shared.env"
    
    if [[ ! -f "$shared_env_file" ]]; then
        echo "Creating shared environment file..."
        cat > "$shared_env_file" << 'ENVEOF'
# Shared Services Configuration
# This file contains only variables needed by shared docker-compose files

# Version and Repository
VERSION=5.1
BLUESPICE_SERVICE_REPOSITORY=bluespice

# Data Directory for Shared Services
DATADIR=/opt/bluespice/shared

# Network Configuration
HTTP_PORT=80
ENABLE_IPV6=true

# Database Configuration (for shared services)
DB_ROOT_USER=
DB_ROOT_PASS=

# SSL/TLS Configuration
HTTPS_METHOD=redirect
ENABLE_HSTS=true
HSTS_SUBDOMAINS=true
SSL_POLICY=Mozilla-Modern

# Let's Encrypt Configuration
ACME_CA_URI=https://acme-v02.api.letsencrypt.org/directory
RENEWAL_INTERVAL=3600
ADMIN_MAIL=somuser@somedomain.tld

# Resource Limits
UPLOAD_MAX_SIZE=100m
ENVEOF
        echo "✓ Shared environment file created: $shared_env_file"
        
        # Try to detect and populate database root credentials
        echo "Detecting database credentials..."
        
        # Check if bluespice-database container exists and is running
        if docker ps --format "table {{.Names}}" | grep -q "bluespice-database"; then
            # Try to get root password from container environment
            local db_root_pass
            db_root_pass=$(docker exec bluespice-database env 2>/dev/null | grep "^MYSQL_ROOT_PASSWORD=" | cut -d= -f2 || true)
            
            if [[ -n "$db_root_pass" ]]; then
                # Test if root user works with this password
                if echo "SELECT 1;" | docker exec -i bluespice-database mariadb -u root -p"$db_root_pass" >/dev/null 2>&1; then
                    echo "✓ Found working root credentials, updating shared environment..."
                fi
                    sed -i "s/^DB_ROOT_USER=.*/DB_ROOT_USER=root/" "$shared_env_file"
                    sed -i "s/^DB_ROOT_PASS=.*/DB_ROOT_PASS=$db_root_pass/" "$shared_env_file"
                else
                    echo "⚠ Warning: Could not find database root password in container"
            fi
        else
            echo "⚠ Warning: bluespice-database container not found or not running"
        fi
    fi
}

# Function to pull required Docker images
pull_docker_images() {
    echo "Checking and pulling required Docker images..."
    
    # Source global environment to get VERSION and EDITION
    if [[ -f "$GLOBAL_ENV" ]]; then
        set -a  # Export all variables
        source "$GLOBAL_ENV"
        set +a  # Stop exporting
    fi
    
    # Default values if not set in environment
    VERSION=${VERSION:-5.1}
    EDITION=${EDITION:-free}
    BLUESPICE_SERVICE_REPOSITORY=${BLUESPICE_SERVICE_REPOSITORY:-bluespice}
    
    # List of required images
    local images=(
        "${BLUESPICE_SERVICE_REPOSITORY}/database:${VERSION}"
        "${BLUESPICE_SERVICE_REPOSITORY}/cache:${VERSION}"
        "${BLUESPICE_SERVICE_REPOSITORY}/search:${VERSION}"
        "${BLUESPICE_SERVICE_REPOSITORY}/proxy:${VERSION}"
        "${BLUESPICE_SERVICE_REPOSITORY}/pdf:${VERSION}"
        "${BLUESPICE_SERVICE_REPOSITORY}/formula:${VERSION}"
        "${BLUESPICE_SERVICE_REPOSITORY}/diagram:${VERSION}"
        "nginxproxy/acme-companion:latest"
    )
    
    # Check and pull each image
    for image in "${images[@]}"; do
        echo "Checking image: $image"
        if ! docker image inspect "$image" >/dev/null 2>&1; then
            echo "Pulling image: $image"
            if ! docker pull "$image"; then
                echo "⚠ Warning: Failed to pull $image - continuing anyway"
            else
                echo "✓ Successfully pulled: $image"
            fi
        else
            echo "✓ Image already available: $image"
        fi
    done
    
    echo "✓ Docker image check complete"
}

# Function to create Docker network with improved error handling
create_docker_network() {
    echo "Setting up Docker network..."
    
    # Check if network already exists
    if docker network ls --format "{{.Name}}" | grep -q "^bluespice-network$"; then
        echo "✓ Docker network 'bluespice-network' already exists"
        return 0
    fi
    
    # Try to create the network
    echo "Creating Docker network 'bluespice-network'..."
    if docker network create bluespice-network 2>/dev/null; then
        echo "✓ Docker network created successfully"
    else
        # Network creation failed - check if it was created by another process
        if docker network ls --format "{{.Name}}" | grep -q "^bluespice-network$"; then
            echo "✓ Docker network 'bluespice-network' exists (created by another process)"
            return 0
        else
            echo "✗ Error: Failed to create Docker network 'bluespice-network'"
            exit 1
        fi
    fi
}

# Function to start shared services
start_shared_services() {
    echo "Starting shared services..."

    # Check if database service is already running
    if docker ps --format "{{.Names}}" | grep -q "^bluespice-database$"; then
        echo "✓ Shared services already running"
        return 0
    fi
    
    echo "Launching shared services containers..."
    if "${SCRIPT_DIR}/bluespice-shared-services" up -d; then
        echo "✓ Shared services containers launched"
    else
        echo "✗ Error: Failed to start shared services"
        exit 1
    fi

    # Wait for services to be ready
    echo "Waiting for services to become healthy..."
    local attempts=0
    local max_attempts=30
    
    while [[ $attempts -lt $max_attempts ]]; do
        if docker ps --format "{{.Names}}" | grep -q "^bluespice-database$"; then
            echo "✓ Database service is running"
            
            # Wait a bit more for full initialization
            echo "Waiting for services to fully initialize..."
            sleep 10
            return 0
        fi
        echo ""
        echo "Waiting for services to start (can take 3-4 attempts)... (attempt $((attempts + 1))/$max_attempts)"
        sleep 10
        ((attempts++))
    done

    echo "✗ Error: Shared services failed to start within expected time"
    echo "Check service status with: docker ps -a"
    exit 1
}

# Function to deploy shared services
deploy_shared_services() {
    echo "Deploying shared services infrastructure..."

    # Pull required Docker images
    pull_docker_images
    
    # Create Docker network with improved error handling
    create_docker_network

    # Start the shared services
    start_shared_services

    echo "✓ Shared services deployment complete"
}

# Main execution
main() {
    echo "BlueSpice Shared Services Setup"
    echo "==============================="
    echo
    
    # Get email for Let's Encrypt
    local email
    email=$(prompt_email)
    
    # Update configuration
    echo "Setting up BlueSpice shared services..."
    update_environment_files "$email"
    
    # Initialize shared services
    init_shared_directory
    
    # Deploy services
    deploy_shared_services
    
    echo
    echo "✓ Shared services setup complete!"
    echo
    echo "Services should be accessible shortly."
    echo "Use 'docker ps' to check service status."
}

# Run main function
main "$@"
