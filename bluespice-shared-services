#!/bin/bash

# BlueSpice Shared Services Manager
# Simple wrapper around Docker Compose for managing shared services

set -euo pipefail

# Script directory and paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SHARED_DIR="${SCRIPT_DIR}/shared"
SHARED_ENV="${SHARED_DIR}/.shared.env"

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Source environment if it exists
source_environment() {
    if [[ -f "$SHARED_ENV" ]]; then
        # shellcheck disable=SC1090
        source "$SHARED_ENV"
    fi
    
    # Set defaults
    export VERSION="${VERSION:-5.1}"
    export EDITION="${EDITION:-free}"
    export BLUESPICE_SERVICE_REPOSITORY="${BLUESPICE_SERVICE_REPOSITORY:-docker.bluespice.com/bluespice}"
}

# Build compose file arguments
build_compose_args() {
    local -a compose_files=()
    
    # Core services
    compose_files+=("-f" "docker-compose.persistent-data-services.yml")
    compose_files+=("-f" "docker-compose.stateless-services.yml")
    
    # Proxy configuration
    if [[ -n "${ADMIN_MAIL:-}" ]]; then
        compose_files+=("-f" "docker-compose.proxy-letsencrypt.yml")
    fi
    compose_files+=("-f" "docker-compose.proxy.yml")
    
    printf '%s\n' "${compose_files[@]}"
}

# Execute Docker Compose command with proper environment
run_docker_compose() {
    local command="$1"
    
    cd "$SHARED_DIR"
    source_environment
    
    # Build compose arguments
    mapfile -t COMPOSE_FILES < <(build_compose_args)
    
    # Execute Docker Compose with native output
    exec docker compose --env-file .shared.env "${COMPOSE_FILES[@]}" $command
}

# Show help
show_help() {
    cat << 'HELP'
BlueSpice Shared Services Manager
=================================

DESCRIPTION:
    Simple wrapper for Docker Compose to manage BlueSpice shared services.
    Uses Docker Compose's native status display and progress indicators.

USAGE:
    ./bluespice-shared-services [COMMAND]

COMMANDS:
    up          Start all shared services (default)
    down        Stop and remove all shared services  
    status      Show service status using Docker Compose
    ps          Show container status using Docker Compose
    logs        Show service logs using Docker Compose
    restart     Restart all shared services
    --help, -h  Show this help message

EXAMPLES:
    ./bluespice-shared-services up
    ./bluespice-shared-services down
    ./bluespice-shared-services status
    ./bluespice-shared-services logs
    ./bluespice-shared-services ps

SERVICES MANAGED:
    - bluespice-database       MariaDB database server
    - bluespice-search         OpenSearch for wiki search  
    - bluespice-cache          Memcached for performance
    - bluespice-proxy          Nginx reverse proxy
    - bluespice-pdf            PDF generation service
    - bluespice-formula        Mathematical formula rendering
    - bluespice-diagram        Diagram generation service
    - bluespice-letsencrypt-service  SSL certificate management

NOTES:
    All output formatting and status display is handled natively by Docker Compose.
    This script is a minimal wrapper that preserves Docker Compose's native behavior.
HELP
}

# Main function
main() {
    local command="${1:-up}"
    
    # Handle help
    if [[ $command == "--help" || $command == "-h" ]]; then
        show_help
        exit 0
    fi
    
    # Ensure we're in the right directory
    if [[ ! -d "$SHARED_DIR" ]]; then
        echo -e "${RED}❌ Error: Shared services directory not found: $SHARED_DIR${NC}" >&2
        exit 1
    fi
    
    # Handle different commands
    case $command in
        "up")
            echo -e "${BLUE}🚀 Starting BlueSpice Shared Services${NC}"
            echo -e "${BLUE}====================================${NC}"
            echo
            run_docker_compose "up -d"
            ;;
            
        "down")
            echo -e "${YELLOW}🛑 Stopping BlueSpice Shared Services${NC}"
            echo -e "${YELLOW}====================================${NC}"
            echo
            run_docker_compose "down"
            ;;
            
        "status"|"ps")
            echo -e "${CYAN}📊 BlueSpice Shared Services Status${NC}"
            echo -e "${CYAN}===================================${NC}"
            echo
            run_docker_compose "ps"
            ;;
            
        "logs")
            echo -e "${CYAN}📋 BlueSpice Shared Services Logs${NC}"
            echo -e "${CYAN}=================================${NC}"
            echo
            run_docker_compose "logs"
            ;;
            
        "restart")
            echo -e "${YELLOW}🔄 Restarting BlueSpice Shared Services${NC}"
            echo -e "${YELLOW}=======================================${NC}"
            echo
            run_docker_compose "restart"
            ;;
            
        *)
            echo -e "${RED}❌ Unknown command: $command${NC}" >&2
            echo -e "${CYAN}💡 Use '--help' to see available commands${NC}" >&2
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
