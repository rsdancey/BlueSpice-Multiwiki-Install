#!/bin/bash

# BlueSpice Wiki Initialization Script
# Complete setup wizard for new BlueSpice wiki instances

set -euo pipefail

# Script directory and paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WIKIS_DIR="$(dirname "${SCRIPT_DIR}")/wikis"
TEMPLATE_DIR="${SCRIPT_DIR}/wiki-template"

# Default values
WIKI_NAME=""
WIKI_DOMAIN=""
WIKI_LANG="en"
SETUP_MODE=""
SKIP_DIRECTORY_SETUP=false
SSL_ENABLED=false

# SSL Certificate functions
# Help function
show_help() {
    cat << 'HELP'
BlueSpice Wiki Initialization Wizard
====================================

SYNOPSIS:
    ./initialize-wiki [OPTIONS]

DESCRIPTION:
    Interactive setup wizard for creating new BlueSpice wiki instances.
    Supports both fresh installations and restoration from backups.

OPTIONS:
    -h, --help          Show this help message and exit

FEATURES:
    • Automated wiki directory setup
    • SSL certificate management with Let's Encrypt
    • SMTP email configuration with validation
    • Database user creation with socket connections
    • Backup restoration with optional image import
    • Multi-language support (en, de, fr, es, it, pt, nl, pl, ru, ja, zh)

SMTP CONFIGURATION:
    The wizard will prompt for SMTP settings to enable email notifications.
    Supported hosts: Gmail, Outlook, custom SMTP servers
    Password validation ensures no spaces or invalid characters.

DATABASE CONNECTIVITY:
    • Uses unique database users per wiki (e.g., wikiname_user)
    • Employs socket connections for improved performance
    • Automatic password synchronization for localhost access

SSL CERTIFICATES:
    • Automatic Let's Encrypt certificate generation
    • Certificate expiry monitoring (warns when <30 days)
    • Automatic renewal support

POST-INSTALLATION:
    After successful setup, the wiki will be accessible at:
    • HTTPS: https://your-domain.com (with SSL)
    • HTTP: http://your-domain.com (without SSL)

MANAGEMENT COMMANDS:
    Start wiki:     ./bluespice-deploy-wiki --wiki-name=NAME
    Stop wiki:      docker compose -f /path/to/wiki down
    Update wiki:    ./bluespice-deploy-wiki --wiki-name=NAME --run-update

EXAMPLES:
    ./initialize-wiki                    # Interactive mode
    ./initialize-wiki --help            # Show this help
    ./initialize-wiki --version         # Show version info

FILES:
    /core/wikis/WIKI_NAME/              # Wiki instance directory
    /core/wikis/WIKI_NAME/.env          # Environment configuration
    /core/wikis/WIKI_NAME/admin_password.txt  # Generated admin password

REQUIREMENTS:
    • Docker and Docker Compose
    • BlueSpice database service running
    • Network connectivity for SSL certificate generation

For more information, see the README.md file or BlueSpice documentation.
HELP
}


# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo "Error: Unknown option $1" >&2
                echo "Use --help for usage information" >&2
                exit 1
                ;;
        esac
    done
}
check_certificate_expiry() {
    local domain="$1"
    
    if docker exec bluespice-letsencrypt-service test -f "/etc/nginx/certs/${domain}.crt" 2>/dev/null; then
        local expiry expiry_epoch current_epoch days_until_expiry
        expiry=$(docker exec bluespice-letsencrypt-service openssl x509 -in "/etc/nginx/certs/${domain}.crt" -noout -enddate | cut -d= -f2)
        expiry_epoch=$(date -d "$expiry" +%s)
        current_epoch=$(date +%s)
        days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))
        
        if [[ $days_until_expiry -lt 30 ]]; then
            echo "Warning: SSL certificate expires in $days_until_expiry days"
            return 1
        else
            echo "SSL certificate valid for $days_until_expiry days"
            return 0
        fi
    else
        echo "No SSL certificate found for $domain"
        return 1
    fi
}


# SMTP password validation function
validate_smtp_pass() {
    local password="$1"
    # Check if password contains spaces
    if [[ "$password" =~ [[:space:]] ]]; then
        return 1
    fi
    return 0
}


# SMTP host validation function
validate_smtp_host() {
    local host="$1"
    # Check if host follows basic hostname format
    if [[ ! "$host" =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ ]]; then
        return 1
    fi
    # Check if host contains at least one dot (domain format)
    if [[ ! "$host" =~ . ]]; then
        return 1
    fi
    return 0
}


# Environment file creation
create_environment_file() {
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    local env_file="${wiki_dir}/.env"
    local template_file="${TEMPLATE_DIR}/.env.template"
    
    if [[ -f "$template_file" ]]; then
        echo "Creating environment file from template..."
        
        # Generate unique database user for this wiki
        local db_user
        db_user="${WIKI_NAME}_user"
        # Generate random password
        db_password=$(openssl rand -base64 16 | tr -d "=+/")
        
        # Copy template and substitute variables
        sed \
            -e "s/WIKI_NAME_PLACEHOLDER/${WIKI_NAME}/g" \
            -e "s/WIKI_DOMAIN_PLACEHOLDER/${WIKI_DOMAIN}/g" \
            -e "s/WIKI_LANG_PLACEHOLDER/${WIKI_LANG}/g" \
            -e "s/WIKI_DB_PASSWORD_PLACEHOLDER/${db_password}/g" \
            -e "s/WIKI_DB_USER_PLACEHOLDER/${db_user}/g" \
            -e "s/SMTP_HOST_PLACEHOLDER/${SMTP_HOST}/g" \
            -e "s/SMTP_PORT_PLACEHOLDER/${SMTP_PORT}/g" \
            -e "s/SMTP_USER_PLACEHOLDER/${SMTP_USER}/g" \
            -e "s/SMTP_PASS_PLACEHOLDER/${SMTP_PASS}/g" \
            "$template_file" > "$env_file"
        
        echo "Environment file created: $env_file"
    else
        echo "Error: Template file not found: $template_file" >&2
        exit 1
    fi
}

# Email configuration file creation
create_email_config_files() {
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    local env_file="${wiki_dir}/.env"
    local pre_init_file="${wiki_dir}/pre-init-settings.php"
    local post_init_file="${wiki_dir}/post-init-settings.php"
    
    echo "Creating email configuration files..."
    
    # Read SMTP settings from .env file
    local smtp_host smtp_port smtp_user smtp_pass smtp_idhost
    if [[ -f "$env_file" ]]; then
        smtp_host=$(grep "^SMTP_HOST=" "$env_file" | cut -d= -f2 2>/dev/null || echo "")
        smtp_port=$(grep "^SMTP_PORT=" "$env_file" | cut -d= -f2 2>/dev/null || echo "587")
        smtp_user=$(grep "^SMTP_USER=" "$env_file" | cut -d= -f2 2>/dev/null || echo "")
        smtp_pass=$(grep "^SMTP_PASS=" "$env_file" | cut -d= -f2 2>/dev/null || echo "")
        smtp_idhost=$(grep "^WIKI_HOST=" "$env_file" | cut -d= -f2 2>/dev/null || echo "")
    else
        echo "Warning: .env file not found for email configuration"
        return 1
    fi
    
    # Create pre-init-settings.php with email permissions
    cat > "$pre_init_file" << 'PREINIT_EOF'
<?php

# Enable email permissions for users
\$wgGroupPermissions['user']['sendemail'] = true;
\$wgGroupPermissions['autoconfirmed']['sendemail'] = true;
PREINIT_EOF
    
    echo "Created pre-init-settings.php with email permissions"
    
    # Create post-init-settings.php with email configuration (only if SMTP is configured)
    if [[ -n "$smtp_host" && -n "$smtp_user" && -n "$smtp_pass" ]]; then
        cat > "$post_init_file" << POSTINIT_EOF
<?php

# Override the default with a bundle of filetypes:
\$wgFileExtensions = array('png', 'gif', 'jpg', 'jpeg', 'ppt', 'pdf', 
'psd', 'mp3', 'xls', 'xlsx', 'doc','docx', 'mp4', 'mov', 'ico' );

\$wgCookieExpiration = 86400;
\$wgExtendedLoginCookieExpiration = null;

# Email configuration
\$wgPasswordSender = '$smtp_user';
\$wgEmergencyContact = '$smtp_user';
\$wgNoReplyAddress = '$smtp_user';

# SMTP configuration
\$wgSMTP = [
    'host'     => '$smtp_host',
    'IDHost'   => '$smtp_idhost',
    'port'     => $smtp_port,
    'auth'     => true,
    'username' => '$smtp_user',
    'password' => '$smtp_pass'
];
POSTINIT_EOF
        
        echo "Created post-init-settings.php with SMTP configuration"
        echo "  SMTP Host: $smtp_host"
        echo "  SMTP User: $smtp_user"
        echo "  Email sender: $smtp_user"
    else
        # Create minimal post-init file if no SMTP configured
        cat > "$post_init_file" << 'POSTINIT_MINIMAL_EOF'
<?php

# Override the default with a bundle of filetypes:
\$wgFileExtensions = array('png', 'gif', 'jpg', 'jpeg', 'ppt', 'pdf', 
'psd', 'mp3', 'xls', 'xlsx', 'doc','docx', 'mp4', 'mov', 'ico' );

\$wgCookieExpiration = 86400;
\$wgExtendedLoginCookieExpiration = null;

# Post-initialization settings
# Add custom configurations here
POSTINIT_MINIMAL_EOF
        
        echo "Created minimal post-init-settings.php (no SMTP configured)"
    fi
}

# Wiki directory setup
setup_wiki_directory() {
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    
    echo "Setting up wiki directory: $wiki_dir"
    mkdir -p "$wiki_dir"
    
    if [[ "$SETUP_MODE" == "restore" ]]; then
        echo "Preparing directory for backup restoration..."
        # Copy essential files only
        cp "${TEMPLATE_DIR}/docker-compose."* "$wiki_dir/"
    else
        echo "Copying template files..."
        cp -r "${TEMPLATE_DIR}/"* "$wiki_dir/"
    fi
    
    echo "Wiki directory prepared"
}

# Wiki deployment
deploy_wiki() {
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    
    echo "Deploying wiki instance..."
    
    cd "$wiki_dir"
    
    # Deploy with fresh installation
    if ! "${SCRIPT_DIR}/bluespice-deploy-wiki" \
        --wiki-name="$WIKI_NAME" \
         \
        --fresh-install; then
        echo "Error: Wiki deployment failed" >&2
        exit 1
    fi
    
    echo "Wiki deployed successfully"
}

# SSL setup
setup_ssl() {
    if [[ "$SETUP_MODE" == "ssl" ]] || [[ "$SSL_ENABLED" == "true" ]]; then
        echo "SSL certificate will be automatically generated by Let's Encrypt"
        echo "This may take a few minutes..."
    fi
}

# Backup restoration function using proper MediaWiki maintenance approach
restore_from_backup() {
    local backup_file="$1"
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    
    echo "Starting backup restoration using MediaWiki maintenance system..."
    
    # Check if backup file exists
    if [[ ! -f "$backup_file" ]]; then
        echo "Error: Backup file not found: $backup_file" >&2
        return 1
    fi
    
    # Determine file type and prepare for restoration
    local file_ext="${backup_file##*.}"
    local temp_sql="/tmp/restore_backup.sql"
    
    echo "Preparing backup file for restoration..."
    
    # Handle different file formats
    case "$file_ext" in
        "gz")
            echo "Decompressing gzip file..."
            if ! gunzip -c "$backup_file" > "$temp_sql"; then
                echo "Error: Failed to decompress backup file" >&2
                return 1
            fi
            ;;
        "sql")
            echo "Using SQL file directly..."
            cp "$backup_file" "$temp_sql"
            ;;
        *)
            echo "Error: Unsupported backup file format. Supported: .sql, .sql.gz" >&2
            return 1
            ;;
    esac
    
    # Check if it is a SQL dump (not XML)
    if head -5 "$temp_sql" | grep -q "MySQL dump\|MariaDB dump\|-- Dump completed"; then
        echo "Detected SQL database dump - using database restoration method"
        
        # Get database credentials
        local db_user
        db_user=$(grep DB_USER "$wiki_dir/.env" | cut -d= -f2)
        
        echo "Restoring database from SQL dump using smart importer..."
        
        # Use smart database importer with prefix detection
        local smart_importer="$SCRIPT_DIR/smart_db_import.sh"
        
        
        if [[ ! -f "$smart_importer" ]]; then
            echo "Error: Smart database importer not found at: $smart_importer" >&2
            return 1
        fi
        
        # Set up environment for smart importer
        export WIKI_DIR="$wiki_dir"
        export SQL_FILE="$temp_sql"
        
        # Call the smart importer script
        if "$smart_importer" "$temp_sql"; then
            echo "✓ Database restored successfully using smart importer"
        else
            echo "Error: Smart database import failed" >&2
            return 1
        fi
        
    elif head -5 "$temp_sql" | grep -q "<mediawiki\|<siteinfo"; then
        echo "Detected MediaWiki XML dump - using importDump.php"
        
        # Copy XML file to wiki container
        docker cp "$temp_sql" "bluespice-${WIKI_NAME}-wiki-web:/tmp/restore.xml"
        
        # Use MediaWiki importDump maintenance script
        if docker exec "bluespice-${WIKI_NAME}-wiki-web" php /app/bluespice/w/maintenance/importDump.php /tmp/restore.xml; then
            echo "✓ Wiki content restored successfully from XML dump"
        else
            echo "Error: XML dump import failed" >&2
            return 1
        fi
        
        # Clean up
        docker exec "bluespice-${WIKI_NAME}-wiki-web" rm -f /tmp/restore.xml
        
    else
        echo "Error: Unable to determine backup file format (not SQL or XML)" >&2
        return 1
    fi
    
    # Run MediaWiki maintenance updates after restoration
    echo "Running MediaWiki maintenance updates..."
    
    # Update database schema and cache
    if docker exec "bluespice-${WIKI_NAME}-wiki-web" php /app/bluespice/w/maintenance/update.php --quick; then
        echo "✓ Database schema updated"
    else
        echo "Warning: Database schema update encountered issues"
    fi
    
    # Rebuild recent changes
    echo "Rebuilding recent changes..."
    docker exec "bluespice-${WIKI_NAME}-wiki-web" php /app/bluespice/w/maintenance/rebuildrecentchanges.php || true
    
    # Clean up local temporary files
    rm -f "$temp_sql"
    
    echo "✓ Backup restoration completed successfully using MediaWiki maintenance system!"
    return 0
}




# Images import function using images import script
import_images() {
    local images_file="$1"
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    
    echo "Starting images import..."
    
    if [[ ! -f "$images_file" ]]; then
        echo "Error: Images file not found: $images_file" >&2
        return 1
    fi
    
    local script_dir="/core/core_install"
    local images_importer="$script_dir/import-images.sh"
    
    if [[ ! -f "$images_importer" ]]; then
        echo "Error: Images import script not found at: $images_importer" >&2
        return 1
    fi
    
    echo "Using images import script to import images..."
    
    if "$images_importer" --wiki-name="$WIKI_NAME" --images-archive="$images_file"; then
        echo "✓ Images imported successfully"
        return 0
    else
        echo "Error: Images import failed" >&2
        return 1
    fi
}

# Display completion information
show_completion_info() {
    echo
    echo "================================================"
    echo "Wiki initialization completed successfully!"
    echo "================================================"
    echo
    echo "Wiki Details:"
    echo "  Name: $WIKI_NAME"
    echo "  Domain: $WIKI_DOMAIN"
    echo "  Language: $WIKI_LANG"
    echo ""
    echo "To view Admin password for user WikiSysop:"
    echo "docker exec bluespice-$WIKI_NAME-wiki-web cat /data/bluespice/initialAdminPassword"
    echo
    
    if [[ "$SETUP_MODE" == "ssl" ]] || [[ "$SSL_ENABLED" == "true" ]]; then
        echo "  URL: https://$WIKI_DOMAIN"
        echo "  SSL: Enabled"
    else
        echo "  URL: http://$WIKI_DOMAIN"
        echo "  SSL: Disabled"
    fi
    
    echo
    echo "✓ Database connectivity: Socket connection configured for optimal performance"
    echo "✓ Unique user authentication: ${WIKI_NAME}_user created with proper permissions"

    echo
    echo "Management commands:"
    echo "  Start:  ./bluespice-deploy-wiki --wiki-name=$WIKI_NAME --domain=$WIKI_DOMAIN"
    echo "  Stop:   docker compose -f /core/wikis/$WIKI_NAME/docker-compose.helper-service.yml -f /core/wikis/$WIKI_NAME/docker-compose.main.yml down"
    echo "  Update: ./bluespice-deploy-wiki --wiki-name=$WIKI_NAME --domain=$WIKI_DOMAIN --run-update"
    echo
}

# Main execution
main() {
    # Parse command line arguments
    parse_arguments "$@"

    echo "BlueSpice Wiki Initialization Wizard"
    echo "======================================"
    echo
    
    # Get wiki name with proper directory checking
    while [[ -z "$WIKI_NAME" ]]; do
        printf "Enter wiki name (alphanumeric, dots, dashes, underscores, no spaces): "; read -r WIKI_NAME
        if [[ ! "$WIKI_NAME" =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "Error: Wiki name must be alphanumeric, dots, dashes, underscores with no spaces" >&2
            WIKI_NAME=""
        elif [[ -d "${WIKIS_DIR}/${WIKI_NAME}" ]]; then
            echo
            echo "Warning: Wiki directory '${WIKIS_DIR}/${WIKI_NAME}' already exists"
            echo "This may contain data from a previous installation."
            echo
            printf "Remove existing directory and continue? [y/N]: "; read -r confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                echo "Removing existing directory..."
                if rm -rf "${WIKIS_DIR:?}/${WIKI_NAME:?}"; then
                    echo "Existing directory removed"
                else
                    echo "Error: Failed to remove existing directory" >&2
                    echo "Setup cancelled." >&2
                    exit 1
                fi
            else
                echo "Using existing directory - continuing with current setup..."
                SKIP_DIRECTORY_SETUP=true
            fi
        fi
    done
    
    # Skip input collection if using existing directory
    if [[ "$SKIP_DIRECTORY_SETUP" != "true" ]]; then
    # Get wiki domain
    while [[ -z "$WIKI_DOMAIN" ]]; do
        printf "Enter wiki domain (e.g., wiki.example.com): "; read -r WIKI_DOMAIN
        if [[ ! "$WIKI_DOMAIN" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            echo "Error: Please enter a valid domain name" >&2
            WIKI_DOMAIN=""
        fi
    done
    
    # Get wiki language
    echo "Available languages: en, de, fr, es, it, pt, nl, pl, ru, ja, zh"
    printf "Enter wiki language code [en]: "; read -r WIKI_LANG
    WIKI_LANG="${WIKI_LANG:-en}"
    
    # Get SMTP configuration
    echo
    echo "SMTP Configuration:"
    echo "Configure email settings for wiki notifications"
    echo
    
    printf "Enter SMTP host: "; read -r SMTP_HOST
    while [[ -z "$SMTP_HOST" ]] || ! validate_smtp_host "$SMTP_HOST"; do
        if [[ -z "$SMTP_HOST" ]]; then
            echo "Error: SMTP host cannot be empty"
        else
            echo "Error: Invalid SMTP host format. Please enter a valid hostname (e.g., smtp.gmail.com)"
        fi
        printf "Enter SMTP host: "; read -r SMTP_HOST
    done
    
    printf "Enter SMTP port [587]: "; read -r SMTP_PORT
    SMTP_PORT="${SMTP_PORT:-587}"
    
    printf "Enter SMTP username: "; read -r SMTP_USER
    while [[ -z "$SMTP_USER" ]]; do
        echo "Error: SMTP username cannot be empty"
        printf "Enter SMTP username: "; read -r SMTP_USER
    done
    
    printf "Enter SMTP password: "; read -r SMTP_PASS
    echo
    while [[ -z "$SMTP_PASS" ]] || ! validate_smtp_pass "$SMTP_PASS"; do
        if [[ -z "$SMTP_PASS" ]]; then
            echo "Error: SMTP password cannot be empty"
        elif [[ "$SMTP_PASS" =~ [[:space:]] ]]; then
            echo "Error: SMTP password cannot contain spaces. Please enter a password without spaces."
        fi
        printf "Enter SMTP password: "; read -r SMTP_PASS
        echo
    done
    
    else
        echo "Loading existing configuration..."
        # Load existing configuration from .env file
        local env_file="${WIKIS_DIR}/${WIKI_NAME}/.env"
        if [[ -f "$env_file" ]]; then
            WIKI_DOMAIN=$(grep "^WIKI_HOST=" "$env_file" | cut -d= -f2 2>/dev/null || echo "")
            WIKI_LANG=$(grep "^WIKI_LANG=" "$env_file" | cut -d= -f2 2>/dev/null || echo "en")
            SMTP_HOST=$(grep "^SMTP_HOST=" "$env_file" | cut -d= -f2 2>/dev/null || echo "")
            SMTP_PORT=$(grep "^SMTP_PORT=" "$env_file" | cut -d= -f2 2>/dev/null || echo "587")
            SMTP_USER=$(grep "^SMTP_USER=" "$env_file" | cut -d= -f2 2>/dev/null || echo "")
            # Detect SSL configuration
            local letsencrypt_host
            letsencrypt_host=$(grep "^LETSENCRYPT_HOST=" "$env_file" | cut -d= -f2 2>/dev/null || echo "")
            if [[ -n "$letsencrypt_host" ]]; then
                # SSL is configured in existing setup
                SSL_ENABLED=true
                echo "  SSL: Enabled (existing configuration)"
            else
                SSL_ENABLED=false
                echo "  SSL: Not configured"
            fi
            echo "Loaded existing configuration:"
            echo "  Domain: $WIKI_DOMAIN"
            echo "  Language: $WIKI_LANG"
            if [[ -n "$SMTP_HOST" ]]; then
                echo "  SMTP Host: $SMTP_HOST"
            fi
            if [[ -n "$SMTP_USER" ]]; then
                echo "  SMTP User: $SMTP_USER"
            fi
        else
            echo "Warning: No .env file found in existing directory"
            WIKI_DOMAIN=""
            WIKI_LANG="en"
        fi
    fi
    
    # Get setup mode
    echo
    echo "Setup options:"
    echo "1) New wiki with SSL certificate"
    echo "2) New wiki without SSL (HTTP only)"
    echo "3) Restore from backup"
    echo "4) Restore from backup with images"
    
    local choice=""
    while [[ ! "$choice" =~ ^[1-4]$ ]]; do
        printf "Choose option [1/2/3/4]: "; read -r choice
    done
    
    case $choice in
        1) SETUP_MODE="ssl" ;;
        2) SETUP_MODE="http" ;;
        3) 
            SETUP_MODE="restore"
            echo
            echo "Backup File Selection:"
            printf "Enter path to backup file (.sql or .sql.gz): "; read -r BACKUP_FILE
            while [[ -z "$BACKUP_FILE" ]] || [[ ! -f "$BACKUP_FILE" ]]; do
                if [[ -z "$BACKUP_FILE" ]]; then
                    echo "Error: Backup file path cannot be empty"
                elif [[ ! -f "$BACKUP_FILE" ]]; then
                    echo "Error: File not found: $BACKUP_FILE"
                fi
                printf "Enter path to backup file (.sql or .sql.gz): "; read -r BACKUP_FILE
            done
            echo "Selected backup file: $BACKUP_FILE"            ;;
        4) 
            SETUP_MODE="restore_with_images"
            echo
            echo "Backup File Selection:"
            printf "Enter path to backup file (.sql or .sql.gz): "; read -r BACKUP_FILE
            while [[ -z "$BACKUP_FILE" ]] || [[ ! -f "$BACKUP_FILE" ]]; do
                if [[ -z "$BACKUP_FILE" ]]; then
                    echo "Error: Backup file path cannot be empty"
                elif [[ ! -f "$BACKUP_FILE" ]]; then
                    echo "Error: File not found: $BACKUP_FILE"
                fi
                printf "Enter path to backup file (.sql or .sql.gz): "; read -r BACKUP_FILE
            done
            echo "Selected backup file: $BACKUP_FILE"
            echo
            echo "Images Archive Selection:"
            printf "Enter path to images archive (.zip): "; read -r IMAGES_FILE
            while [[ -z "$IMAGES_FILE" ]] || [[ ! -f "$IMAGES_FILE" ]]; do
                if [[ -z "$IMAGES_FILE" ]]; then
                    echo "Error: Images file path cannot be empty"
                elif [[ ! -f "$IMAGES_FILE" ]]; then
                    echo "Error: File not found: $IMAGES_FILE"
                fi
                printf "Enter path to images archive (.zip): "; read -r IMAGES_FILE
            done
            echo "Selected images file: $IMAGES_FILE"
            ;;
    esac
    
    # Show configuration summary
    echo
    echo "Configuration Summary:"
    echo "  Wiki Name: $WIKI_NAME"
    echo "  Domain: $WIKI_DOMAIN"
    echo "  Language: $WIKI_LANG"
    echo "  Setup Mode: $SETUP_MODE"
    echo
    echo "  SMTP Host: $SMTP_HOST"
    echo "  SMTP Port: $SMTP_PORT"
    echo "  SMTP User: $SMTP_USER"
    if [[ "$SETUP_MODE" == "restore" ]]; then
        echo "  Backup File: $BACKUP_FILE"
    elif [[ "$SETUP_MODE" == "restore_with_images" ]]; then
        echo "  Backup File: $BACKUP_FILE"
        echo "  Images File: $IMAGES_FILE"
    fi
    
    printf "Proceed with this configuration? [y/N]: "; read -r confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Setup cancelled."
        exit 0
    fi
    
    echo
    echo "Starting wiki initialization..."
    
    # Setup process
    if [[ "$SKIP_DIRECTORY_SETUP" != "true" ]]; then
        setup_wiki_directory
        create_environment_file
        create_email_config_files
    else
        echo "Using existing directory - skipping directory and environment setup"
    fi
    deploy_wiki
    
    # Handle backup restoration if selected
    if [[ "$SETUP_MODE" == "restore" ]]; then
        if ! restore_from_backup "$BACKUP_FILE"; then
            echo "Error: Backup restoration failed" >&2
            exit 1
        fi
    elif [[ "$SETUP_MODE" == "restore_with_images" ]]; then
        if ! restore_from_backup "$BACKUP_FILE"; then
            echo "Error: Backup restoration failed" >&2
            exit 1
        fi
        if ! import_images "$IMAGES_FILE"; then
            echo "Error: Images import failed" >&2
            exit 1
        fi
    fi
    setup_ssl
    
    # Show completion information
    show_completion_info
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
