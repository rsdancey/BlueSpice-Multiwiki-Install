#!/bin/bash

# BlueSpice Wiki Initialization Script
# Complete setup wizard for new BlueSpice wiki instances

set -euo pipefail

# Script directory and paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WIKIS_DIR="$(dirname "${SCRIPT_DIR}")/wikis"
TEMPLATE_DIR="${SCRIPT_DIR}/wiki-template"

# Default values
WIKI_NAME=""
WIKI_DOMAIN=""
WIKI_LANG="en"
SETUP_MODE=""

# SSL Certificate functions
check_certificate_expiry() {
    local domain="$1"
    
    if docker exec bluespice-letsencrypt-service test -f "/etc/nginx/certs/${domain}.crt" 2>/dev/null; then
        local expiry expiry_epoch current_epoch days_until_expiry
        expiry=$(docker exec bluespice-letsencrypt-service openssl x509 -in "/etc/nginx/certs/${domain}.crt" -noout -enddate | cut -d= -f2)
        expiry_epoch=$(date -d "$expiry" +%s)
        current_epoch=$(date +%s)
        days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))
        
        if [[ $days_until_expiry -lt 30 ]]; then
            echo "Warning: SSL certificate expires in $days_until_expiry days" >&2
            return 1
        else
            echo "SSL certificate valid for $days_until_expiry days"
            return 0
        fi
    else
        echo "No SSL certificate found for $domain"
        return 1
    fi
}

setup_ssl_certificate() {
    local domain="$1"
    
    echo "Setting up SSL certificate for $domain..."
    
    # Create certificate request
    docker exec bluespice-letsencrypt-service /app/letsencrypt_service_data --domain="$domain"
    
    # Wait for certificate generation
    local attempts=0
    while [[ $attempts -lt 12 ]]; do
        if docker exec bluespice-letsencrypt-service test -f "/etc/nginx/certs/${domain}.crt" 2>/dev/null; then
            echo "SSL certificate generated successfully"
            return 0
        fi
        
        echo "Waiting for certificate generation... (attempt $((attempts + 1))/12)"
        sleep 30
        ((attempts++))
    done
    
    echo "Error: SSL certificate generation timed out" >&2
    return 1
}

# User input functions
prompt_wiki_name() {
    local name=""
    while [[ -z "$name" ]]; do
        read -r -p "Enter wiki name (alphanumeric, dots, dashes, underscores, no spaces): " name
        if [[ ! "$name" =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "Error: Wiki name must be alphanumeric, dots, dashes, underscores with no spaces" >&2
            name=""
        elif [[ -d "${WIKIS_DIR}/${name}" ]]; then
            echo
            echo "Warning: Wiki directory '${WIKIS_DIR}/${name}' already exists"
            echo "This may contain data from a previous installation."
            echo
            read -r -p "Remove existing directory and continue? [y/N]: " confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                echo "Removing existing directory..."
                if rm -rf "${WIKIS_DIR:?}/${name:?}"; then
                    echo "Existing directory removed"
                else
                    echo "Error: Failed to remove existing directory" >&2
                    echo "Setup cancelled." >&2
                    exit 1
                fi
            else
                echo "Setup cancelled by user."
                exit 0
            fi
        fi
    done
    echo "$name"
}

prompt_wiki_domain() {
    local domain=""
    while [[ -z "$domain" ]]; do
        read -r -p "Enter wiki domain (e.g., wiki.example.com): " domain
        if [[ ! "$domain" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            echo "Error: Please enter a valid domain name" >&2
            domain=""
        fi
    done
    echo "$domain"
}

prompt_wiki_language() {
    local lang=""
    echo "Available languages: en, de, fr, es, it, pt, nl, pl, ru, ja, zh" >&2
    read -r -p "Enter wiki language code [en]: " lang
    echo "${lang:-en}"
}


# Environment file creation
create_environment_file() {
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    local env_file="${wiki_dir}/.env"
    local template_file="${TEMPLATE_DIR}/.env.template"
    
    if [[ -f "$template_file" ]]; then
        echo "Creating environment file from template..."
        
        # Generate random password
        local db_password
        db_password=$(openssl rand -base64 16 | tr -d "=+/")
        
        # Copy template and substitute variables
        sed \
            -e "s/WIKI_NAME_PLACEHOLDER/${WIKI_NAME}/g" \
            -e "s/WIKI_DOMAIN_PLACEHOLDER/${WIKI_DOMAIN}/g" \
            -e "s/WIKI_LANG_PLACEHOLDER/${WIKI_LANG}/g" \
            -e "s/WIKI_DB_PASSWORD_PLACEHOLDER/${db_password}/g" \
            "$template_file" > "$env_file"
        
        echo "Environment file created: $env_file"
    else
        echo "Error: Template file not found: $template_file" >&2
        exit 1
    fi
}

# Wiki directory setup
setup_wiki_directory() {
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    
    echo "Setting up wiki directory: $wiki_dir"
    mkdir -p "$wiki_dir"
    
    if [[ "$SETUP_MODE" == "restore" ]]; then
        echo "Preparing directory for backup restoration..."
        # Copy essential files only
        cp "${TEMPLATE_DIR}/docker-compose."* "$wiki_dir/"
    else
        echo "Copying template files..."
        cp -r "${TEMPLATE_DIR}/"* "$wiki_dir/"
    fi
    
    echo "Wiki directory prepared"
}

# Wiki deployment
deploy_wiki() {
    local wiki_dir="${WIKIS_DIR}/${WIKI_NAME}"
    
    echo "Deploying wiki instance..."
    
    cd "$wiki_dir"
    
    # Deploy with fresh installation
    if ! "${SCRIPT_DIR}/bluespice-deploy-wiki" \
        --wiki-name="$WIKI_NAME" \
        --domain="$WIKI_DOMAIN" \
        --fresh-install; then
        echo "Error: Wiki deployment failed" >&2
        exit 1
    fi
    
    echo "Wiki deployed successfully"
}

# SSL setup
setup_ssl() {
    if [[ "$SETUP_MODE" == "ssl" ]]; then
        echo "Setting up SSL certificate..."
        
        if ! check_certificate_expiry "$WIKI_DOMAIN"; then
            if ! setup_ssl_certificate "$WIKI_DOMAIN"; then
                echo "Error: SSL setup failed" >&2
                exit 1
            fi
        fi
        
        echo "SSL configuration completed"
    fi
}

# Display completion information
show_completion_info() {
    echo
    echo "================================================"
    echo "Wiki initialization completed successfully!"
    echo "================================================"
    echo
    echo "Wiki Details:"
    echo "  Name: $WIKI_NAME"
    echo "  Domain: $WIKI_DOMAIN"
    echo "  Language: $WIKI_LANG"
    echo
    
    if [[ "$SETUP_MODE" == "ssl" ]]; then
        echo "  URL: https://$WIKI_DOMAIN"
        echo "  SSL: Enabled"
    else
        echo "  URL: http://$WIKI_DOMAIN"
        echo "  SSL: Disabled"
    fi
    
    echo
    echo "Next steps:"
    echo "1. Access your wiki at the URL above"
    echo "2. Log in with the default admin credentials"
    echo "3. Configure your wiki settings"
    echo
    echo "Management commands:"
    echo "  Start:  ./bluespice-deploy-wiki --wiki-name=$WIKI_NAME --domain=$WIKI_DOMAIN"
    echo "  Stop:   docker compose -f /core/wikis/$WIKI_NAME/docker-compose.helper-service.yml -f /core/wikis/$WIKI_NAME/docker-compose.main.yml down"
    echo "  Update: ./bluespice-deploy-wiki --wiki-name=$WIKI_NAME --domain=$WIKI_DOMAIN --run-update"
    echo
}

# Main execution
main() {
    echo "BlueSpice Wiki Initialization Wizard"
    echo "======================================"
    echo
    
    # Collect user input
    WIKI_NAME=$(prompt_wiki_name)
    WIKI_DOMAIN=$(prompt_wiki_domain)
    WIKI_LANG=$(prompt_wiki_language)
    echo
    echo "Setup options:"
    echo "1) New wiki with SSL certificate"
    echo "2) New wiki without SSL (HTTP only)"
    echo "3) Restore from backup"
    
    local choice=""
    while [[ ! "$choice" =~ ^[1-3]$ ]]; do
        read -r -p "Choose option [1/2/3]: " choice
    done
    
    case $choice in
        1) SETUP_MODE="ssl" ;;
        2) SETUP_MODE="http" ;;
        3) SETUP_MODE="restore" ;;
    esac
    
    echo
    echo "Configuration Summary:"
    echo "  Wiki Name: $WIKI_NAME"
    echo "  Domain: $WIKI_DOMAIN"
    echo "  Language: $WIKI_LANG"
    echo "  Setup Mode: $SETUP_MODE"
    echo
    
    read -r -p "Proceed with this configuration? [y/N]: " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Setup cancelled."
        exit 0
    fi
    
    echo
    echo "Starting wiki initialization..."
    
    # Setup process
    setup_wiki_directory
    create_environment_file
    deploy_wiki
    setup_ssl
    
    # Show completion information
    show_completion_info
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
